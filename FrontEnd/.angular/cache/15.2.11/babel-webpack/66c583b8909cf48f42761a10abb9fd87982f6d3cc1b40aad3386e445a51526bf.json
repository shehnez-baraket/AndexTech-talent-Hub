{"ast":null,"code":"import { ScaleType } from '@swimlane/ngx-charts';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../Services/AvisClientService\";\nimport * as i2 from \"../Services/ReponseService\";\nimport * as i3 from \"../Services/QuestionService\";\nimport * as i4 from \"../Services/Questionnaire\";\nimport * as i5 from \"../Services/QCMService\";\nimport * as i6 from \"../Services/QuizService\";\nimport * as i7 from \"../Services/CandidatService\";\nimport * as i8 from \"@angular/common\";\nimport * as i9 from \"@swimlane/ngx-charts\";\nfunction StatistiquesComponent_ngx_charts_pie_chart_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"ngx-charts-pie-chart\", 6);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"view\", ctx_r0.view)(\"scheme\", ctx_r0.colorScheme)(\"results\", ctx_r0.pieData)(\"legend\", ctx_r0.showLegend)(\"explodeSlices\", false)(\"doughnut\", false)(\"labels\", true);\n  }\n}\nexport class StatistiquesComponent {\n  constructor(avisClientService, reponseService, questionService, questionnaireService, qcmService, quizService, candidatService) {\n    this.avisClientService = avisClientService;\n    this.reponseService = reponseService;\n    this.questionService = questionService;\n    this.questionnaireService = questionnaireService;\n    this.qcmService = qcmService;\n    this.quizService = quizService;\n    this.candidatService = candidatService;\n    this.reponses65Plus = 0;\n    this.reponses85Plus = 0;\n    this.totalQCMs = 50;\n    this.totalQuestionnaires = 20;\n    this.totalQuizzes = 15;\n    this.totalCandidates = 100;\n    this.highScoreQuizzes = 10;\n    this.highCorrectAnswersQuestions = 30;\n    this.totalQuestions = 0;\n    this.view = [400, 300]; // Ajuster la taille des graphiques ici\n    this.showXAxis = true;\n    this.showYAxis = true;\n    this.gradient = false;\n    this.showLegend = true;\n    this.showXAxisLabel = true;\n    this.showYAxisLabel = true;\n    this.xAxisLabel = 'Étoiles';\n    this.yAxisLabel = 'Nombre';\n    // Définition du schéma de couleur\n    this.colorScheme = {\n      name: 'custom',\n      selectable: true,\n      group: ScaleType.Ordinal,\n      domain: ['#00214F', '#F6E211', '#E7E6E6']\n    };\n    this.data = [];\n    this.barData = [];\n    this.pieData = [];\n  }\n  ngOnInit() {\n    this.fetchStatistiques();\n    this.fetchCountReponsesByScore();\n    this.fetchStatistiquesCount();\n  }\n  fetchCountReponsesByScore() {\n    this.reponseService.getCountReponsesByScore().subscribe(result => {\n      console.log('Pie Data received:', result);\n      this.reponses65Plus = result.reponses65Plus;\n      this.reponses85Plus = result.reponses85Plus;\n      this.pieData = [{\n        name: '> 65%',\n        value: this.reponses65Plus\n      }, {\n        name: '> 85%',\n        value: this.reponses85Plus\n      }];\n      console.log('Updated Pie Data:', this.pieData);\n    }, error => {\n      console.error('Error fetching count of responses by score:', error);\n    });\n  }\n  fetchStatistiques() {\n    this.avisClientService.getStatistiques().subscribe(statistiques => {\n      this.barData = Object.keys(statistiques.nombreParRating).map(rating => ({\n        name: `${rating} étoile(s)`,\n        value: statistiques.nombreParRating[rating]\n      }));\n    });\n  }\n  fetchStatistiquesCount() {\n    this.candidatService.getTotalCandidatsCount().subscribe(count => {\n      this.totalCandidates = count;\n      this.updateChartData();\n    });\n    this.questionService.getTotalQuestionCount().subscribe(count => {\n      this.totalQuestions = count;\n      this.updateChartData();\n    });\n    this.questionnaireService.getTotalQuestionnaireCount().subscribe(count => {\n      this.totalQuestionnaires = count;\n      this.updateChartData();\n    });\n    /*this.qcmService.getTotalQcmCount().subscribe(count => {\r\n      this.totalQCMs = count;\r\n      this.updateChartData();\r\n    });*/\n    this.quizService.getTotalQuizCount().subscribe(count => {\n      this.totalQuizzes = count;\n      this.updateChartData();\n    });\n  }\n  updateChartData() {\n    this.data = [{\n      name: 'Total Questions',\n      value: this.totalQuestions\n    }, {\n      name: 'Total Questionnaires',\n      value: this.totalQuestionnaires\n    }, {\n      name: 'Total QCMs',\n      value: this.totalQCMs\n    }, {\n      name: 'Total Quizzes',\n      value: this.totalQuizzes\n    }, {\n      name: 'Total Candidats',\n      value: this.totalCandidates\n    }];\n    console.log('Updated Bar Data:', this.data);\n  }\n  static #_ = this.ɵfac = function StatistiquesComponent_Factory(t) {\n    return new (t || StatistiquesComponent)(i0.ɵɵdirectiveInject(i1.AvisClientService), i0.ɵɵdirectiveInject(i2.ReponseService), i0.ɵɵdirectiveInject(i3.QuestionService), i0.ɵɵdirectiveInject(i4.QuestionnaireService), i0.ɵɵdirectiveInject(i5.QCMService), i0.ɵɵdirectiveInject(i6.QuizService), i0.ɵɵdirectiveInject(i7.CandidatService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: StatistiquesComponent,\n    selectors: [[\"app-statistiques\"]],\n    decls: 13,\n    vars: 13,\n    consts: [[1, \"statistics-dashboard\"], [1, \"chart-container\"], [1, \"chart-title\"], [3, \"view\", \"scheme\", \"results\", \"gradient\", \"legend\", \"showXAxisLabel\", \"showYAxisLabel\", \"xAxisLabel\", \"yAxisLabel\"], [3, \"view\", \"scheme\", \"results\", \"legend\", \"explodeSlices\", \"doughnut\", \"labels\", 4, \"ngIf\"], [3, \"view\", \"scheme\", \"results\"], [3, \"view\", \"scheme\", \"results\", \"legend\", \"explodeSlices\", \"doughnut\", \"labels\"]],\n    template: function StatistiquesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h3\", 2);\n        i0.ɵɵtext(3, \"Distribution des \\u00C9valuations\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(4, \"ngx-charts-bar-horizontal\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\", 1)(6, \"h3\", 2);\n        i0.ɵɵtext(7, \"Pourcentage de R\\u00E9ponses Correctes\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(8, StatistiquesComponent_ngx_charts_pie_chart_8_Template, 1, 7, \"ngx-charts-pie-chart\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\", 1)(10, \"h3\", 2);\n        i0.ɵɵtext(11, \"Statistiques Globales\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(12, \"ngx-charts-number-card\", 5);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"view\", ctx.view)(\"scheme\", ctx.colorScheme)(\"results\", ctx.barData)(\"gradient\", ctx.gradient)(\"legend\", ctx.showLegend)(\"showXAxisLabel\", ctx.showXAxisLabel)(\"showYAxisLabel\", ctx.showYAxisLabel)(\"xAxisLabel\", ctx.xAxisLabel)(\"yAxisLabel\", ctx.yAxisLabel);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.pieData.length > 0);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"view\", ctx.view)(\"scheme\", ctx.colorScheme)(\"results\", ctx.data);\n      }\n    },\n    dependencies: [i8.NgIf, i9.BarHorizontalComponent, i9.NumberCardComponent, i9.PieChartComponent],\n    styles: [\".statistics-container[_ngcontent-%COMP%] {\\r\\n  display: flex;\\r\\n  flex-wrap: wrap;\\r\\n  justify-content: space-around;\\r\\n}\\r\\n.mat-card-title-custom[_ngcontent-%COMP%] {\\r\\n  text-align: center;\\r\\n  font-size: 16px; \\r\\n}\\r\\n\\r\\nmat-card[_ngcontent-%COMP%] {\\r\\n  width: 45%;\\r\\n  margin: 10px;\\r\\n}\\r\\n\\r\\ncanvas[_ngcontent-%COMP%] {\\r\\n  width: 100% !important;\\r\\n  height: 250px !important;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvc3RhdGlzdGlxdWVzL3N0YXRpc3RpcXVlcy5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsYUFBYTtFQUNiLGVBQWU7RUFDZiw2QkFBNkI7QUFDL0I7QUFDQTtFQUNFLGtCQUFrQjtFQUNsQixlQUFlLEVBQUUsbUNBQW1DO0FBQ3REOztBQUVBO0VBQ0UsVUFBVTtFQUNWLFlBQVk7QUFDZDs7QUFFQTtFQUNFLHNCQUFzQjtFQUN0Qix3QkFBd0I7QUFDMUIiLCJzb3VyY2VzQ29udGVudCI6WyIuc3RhdGlzdGljcy1jb250YWluZXIge1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZmxleC13cmFwOiB3cmFwO1xyXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xyXG59XHJcbi5tYXQtY2FyZC10aXRsZS1jdXN0b20ge1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICBmb250LXNpemU6IDE2cHg7IC8qIFRhaWxsZSBkZSBwb2xpY2UgcGVyc29ubmFsaXPDg8KpZSAqL1xyXG59XHJcblxyXG5tYXQtY2FyZCB7XHJcbiAgd2lkdGg6IDQ1JTtcclxuICBtYXJnaW46IDEwcHg7XHJcbn1cclxuXHJcbmNhbnZhcyB7XHJcbiAgd2lkdGg6IDEwMCUgIWltcG9ydGFudDtcclxuICBoZWlnaHQ6IDI1MHB4ICFpbXBvcnRhbnQ7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["ScaleType","i0","StatistiquesComponent","constructor","avisClientService","reponseService","questionService","questionnaireService","qcmService","quizService","candidatService","name","selectable","group","Ordinal","domain","ngOnInit","fetchStatistiques","fetchCountReponsesByScore","fetchStatistiquesCount","getCountReponsesByScore","subscribe","result","console","log","reponses65Plus","reponses85Plus","pieData","value","error","getStatistiques","statistiques","barData","Object","keys","nombreParRating","map","rating","getTotalCandidatsCount","count","totalCandidates","updateChartData","getTotalQuestionCount","totalQuestions","getTotalQuestionnaireCount","totalQuestionnaires","getTotalQuizCount","totalQuizzes","data","totalQCMs","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\shehn\\Music\\Andex PFE\\FrontEnd\\src\\app\\statistiques\\statistiques.component.ts","C:\\Users\\shehn\\Music\\Andex PFE\\FrontEnd\\src\\app\\statistiques\\statistiques.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Color, ScaleType } from '@swimlane/ngx-charts';\nimport { AvisClientService } from '../Services/AvisClientService';\nimport { ReponseService } from '../Services/ReponseService';\nimport { QuestionService } from '../Services/QuestionService';\nimport { QuestionnaireService } from '../Services/Questionnaire';\nimport { QCMService } from '../Services/QCMService';\nimport { QuizService } from '../Services/QuizService';\nimport { CandidatService } from '../Services/CandidatService';\n\n@Component({\n  selector: 'app-statistiques',\n  templateUrl: './statistiques.component.html',\n  styleUrls: ['./statistiques.component.css']\n})\nexport class StatistiquesComponent implements OnInit {\n  reponses65Plus: number = 0;\n  reponses85Plus: number = 0;\n  totalQCMs: number = 50;\n  totalQuestionnaires: number = 20;\n  totalQuizzes: number = 15;\n  totalCandidates: number = 100;\n  highScoreQuizzes: number = 10;\n  highCorrectAnswersQuestions: number = 30;\n  totalQuestions : number = 0;\n  view: [number, number] = [400, 300]; // Ajuster la taille des graphiques ici\n  showXAxis = true;\n  showYAxis = true;\n  gradient = false;\n  showLegend = true;\n  showXAxisLabel = true;\n  showYAxisLabel = true;\n  xAxisLabel = 'Étoiles';\n  yAxisLabel = 'Nombre';\n\n  // Définition du schéma de couleur\n  colorScheme: Color = {\n    name: 'custom',\n    selectable: true,\n    group: ScaleType.Ordinal,\n    domain: ['#00214F', '#F6E211', '#E7E6E6']\n  };\n  \n  data: any[] = [];\n  barData: any[] = [];\n  pieData: any[] = [];\n\n  constructor(\n    private avisClientService: AvisClientService,\n    private reponseService: ReponseService,\n    private questionService: QuestionService,\n    private questionnaireService: QuestionnaireService,\n    private qcmService: QCMService,\n    private quizService: QuizService,\n    private candidatService: CandidatService\n  ) { }\n\n  ngOnInit(): void {\n    this.fetchStatistiques();\n    this.fetchCountReponsesByScore();\n    this.fetchStatistiquesCount();\n  }\n\n  fetchCountReponsesByScore() {\n    this.reponseService.getCountReponsesByScore().subscribe(\n      (result: any) => {\n        console.log('Pie Data received:', result); \n        this.reponses65Plus = result.reponses65Plus;\n        this.reponses85Plus = result.reponses85Plus;\n\n        this.pieData = [\n          { name: '> 65%', value: this.reponses65Plus },\n          { name: '> 85%', value: this.reponses85Plus }\n        ];\n\n        console.log('Updated Pie Data:', this.pieData); \n      },\n      (error: any) => {\n        console.error('Error fetching count of responses by score:', error);\n      }\n    );\n  }\n\n  fetchStatistiques(): void {\n    this.avisClientService.getStatistiques().subscribe((statistiques: { nombreParRating: { [x: string]: any; }; }) => {\n      this.barData = Object.keys(statistiques.nombreParRating).map(rating => ({\n        name: `${rating} étoile(s)`,\n        value: statistiques.nombreParRating[rating]\n      }));\n    });\n  }\n\n  fetchStatistiquesCount(): void {\n    this.candidatService.getTotalCandidatsCount().subscribe(count => {\n      this.totalCandidates = count;\n      this.updateChartData();\n    });\n    \n    this.questionService.getTotalQuestionCount().subscribe(count => {\n      this.totalQuestions = count;\n      this.updateChartData();\n    });\n\n    this.questionnaireService.getTotalQuestionnaireCount().subscribe(count => {\n      this.totalQuestionnaires = count;\n      this.updateChartData();\n    });\n\n    /*this.qcmService.getTotalQcmCount().subscribe(count => {\n      this.totalQCMs = count;\n      this.updateChartData();\n    });*/\n\n    this.quizService.getTotalQuizCount().subscribe(count => {\n      this.totalQuizzes = count;\n      this.updateChartData();\n    });\n  }\n\n  updateChartData(): void {\n    this.data = [\n      { name: 'Total Questions', value: this.totalQuestions },\n      { name: 'Total Questionnaires', value: this.totalQuestionnaires },\n      { name: 'Total QCMs', value: this.totalQCMs },\n      { name: 'Total Quizzes', value: this.totalQuizzes },\n      { name: 'Total Candidats', value: this.totalCandidates }\n    ];\n    console.log('Updated Bar Data:', this.data); \n  }\n}\n","<div class=\"statistics-dashboard\">\n  <div class=\"chart-container\">\n    <h3 class=\"chart-title\">Distribution des Évaluations</h3>\n    <ngx-charts-bar-horizontal\n      [view]=\"view\"\n      [scheme]=\"colorScheme\"\n      [results]=\"barData\"\n      [gradient]=\"gradient\"\n      [legend]=\"showLegend\"\n      [showXAxisLabel]=\"showXAxisLabel\"\n      [showYAxisLabel]=\"showYAxisLabel\"\n      [xAxisLabel]=\"xAxisLabel\"\n      [yAxisLabel]=\"yAxisLabel\">\n    </ngx-charts-bar-horizontal>\n  </div>\n\n  <div class=\"chart-container\">\n    <h3 class=\"chart-title\">Pourcentage de Réponses Correctes</h3>\n    <ngx-charts-pie-chart\n      *ngIf=\"pieData.length > 0\"\n      [view]=\"view\"\n      [scheme]=\"colorScheme\"\n      [results]=\"pieData\"\n      [legend]=\"showLegend\"\n      [explodeSlices]=\"false\"\n      [doughnut]=\"false\"\n      [labels]=\"true\">\n    </ngx-charts-pie-chart>\n  </div>\n\n  <div class=\"chart-container\">\n    <h3 class=\"chart-title\">Statistiques Globales</h3>\n    <ngx-charts-number-card\n      [view]=\"view\"\n      [scheme]=\"colorScheme\"\n      [results]=\"data\">\n    </ngx-charts-number-card>\n  </div>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}