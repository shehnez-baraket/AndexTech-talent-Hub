{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { ScaleType } from '@swimlane/ngx-charts';\nlet StatistiquesComponent = class StatistiquesComponent {\n  constructor(avisClientService, reponseService, questionService, questionnaireService, qcmService, quizService, candidatService) {\n    this.avisClientService = avisClientService;\n    this.reponseService = reponseService;\n    this.questionService = questionService;\n    this.questionnaireService = questionnaireService;\n    this.qcmService = qcmService;\n    this.quizService = quizService;\n    this.candidatService = candidatService;\n    this.reponses65Plus = 0;\n    this.reponses85Plus = 0;\n    this.totalQCMs = 50;\n    this.totalQuestionnaires = 20;\n    this.totalQuizzes = 15;\n    this.totalCandidates = 100;\n    this.highScoreQuizzes = 10;\n    this.highCorrectAnswersQuestions = 30;\n    this.totalQuestions = 0;\n    this.view = [400, 300]; // Ajuster la taille des graphiques ici\n    this.showXAxis = true;\n    this.showYAxis = true;\n    this.gradient = false;\n    this.showLegend = true;\n    this.showXAxisLabel = true;\n    this.showYAxisLabel = true;\n    this.xAxisLabel = 'Étoiles';\n    this.yAxisLabel = 'Nombre';\n    // Définition du schéma de couleur\n    this.colorScheme = {\n      name: 'custom',\n      selectable: true,\n      group: ScaleType.Ordinal,\n      domain: ['#00214F', '#F6E211', '#E7E6E6']\n    };\n    this.data = [];\n    this.barData = [];\n    this.pieData = [];\n  }\n  ngOnInit() {\n    this.fetchStatistiques();\n    this.fetchCountReponsesByScore();\n    this.fetchStatistiquesCount();\n  }\n  fetchCountReponsesByScore() {\n    this.reponseService.getCountReponsesByScore().subscribe(result => {\n      console.log('Pie Data received:', result);\n      this.reponses65Plus = result.reponses65Plus;\n      this.reponses85Plus = result.reponses85Plus;\n      this.pieData = [{\n        name: '> 65%',\n        value: this.reponses65Plus\n      }, {\n        name: '> 85%',\n        value: this.reponses85Plus\n      }];\n      console.log('Updated Pie Data:', this.pieData);\n    }, error => {\n      console.error('Error fetching count of responses by score:', error);\n    });\n  }\n  fetchStatistiques() {\n    this.avisClientService.getAvisCountByStars().subscribe(statistiques => {\n      this.barData = Object.keys(statistiques).map(rating => ({\n        name: `${rating} étoile(s)`,\n        value: statistiques[rating]\n      }));\n    });\n  }\n  fetchStatistiquesCount() {\n    this.candidatService.getTotalCandidatsCount().subscribe(count => {\n      this.totalCandidates = count;\n      this.updateChartData();\n    });\n    this.questionService.getTotalQuestionCount().subscribe(count => {\n      this.totalQuestions = count;\n      this.updateChartData();\n    });\n    this.questionnaireService.getTotalQuestionnaireCount().subscribe(count => {\n      this.totalQuestionnaires = count;\n      this.updateChartData();\n    });\n    /*this.qcmService.getTotalQcmCount().subscribe(count => {\r\n      this.totalQCMs = count;\r\n      this.updateChartData();\r\n    });*/\n    this.quizService.getTotalQuizCount().subscribe(count => {\n      this.totalQuizzes = count;\n      this.updateChartData();\n    });\n  }\n  updateChartData() {\n    this.data = [{\n      name: 'Total Questions',\n      value: this.totalQuestions\n    }, {\n      name: 'Total Questionnaires',\n      value: this.totalQuestionnaires\n    }, {\n      name: 'Total QCMs',\n      value: this.totalQCMs\n    }, {\n      name: 'Total Quizzes',\n      value: this.totalQuizzes\n    }, {\n      name: 'Total Candidats',\n      value: this.totalCandidates\n    }];\n    console.log('Updated Bar Data:', this.data);\n  }\n};\nStatistiquesComponent = __decorate([Component({\n  selector: 'app-statistiques',\n  templateUrl: './statistiques.component.html',\n  styleUrls: ['./statistiques.component.css']\n})], StatistiquesComponent);\nexport { StatistiquesComponent };","map":{"version":3,"mappings":"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","names":["Component","ScaleType","StatistiquesComponent","constructor","avisClientService","reponseService","questionService","questionnaireService","qcmService","quizService","candidatService","name","selectable","group","Ordinal","domain","ngOnInit","fetchStatistiques","fetchCountReponsesByScore","fetchStatistiquesCount","getCountReponsesByScore","subscribe","result","console","log","reponses65Plus","reponses85Plus","pieData","value","error","getAvisCountByStars","statistiques","barData","Object","keys","map","rating","getTotalCandidatsCount","count","totalCandidates","updateChartData","getTotalQuestionCount","totalQuestions","getTotalQuestionnaireCount","totalQuestionnaires","getTotalQuizCount","totalQuizzes","data","totalQCMs","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\shehn\\Music\\Andex PFE\\FrontEnd\\src\\app\\statistiques\\statistiques.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Color, ScaleType } from '@swimlane/ngx-charts';\nimport { AvisClientService } from '../Services/AvisClientService';\nimport { ReponseService } from '../Services/ReponseService';\nimport { QuestionService } from '../Services/QuestionService';\nimport { QuestionnaireService } from '../Services/QuestionnaireService'; // Correction de l'import\nimport { QCMService } from '../Services/QCMService';\nimport { QuizService } from '../Services/QuizService';\nimport { CandidatService } from '../Services/CandidatService';\n\n@Component({\n  selector: 'app-statistiques',\n  templateUrl: './statistiques.component.html',\n  styleUrls: ['./statistiques.component.css']\n})\nexport class StatistiquesComponent implements OnInit {\n  reponses65Plus: number = 0;\n  reponses85Plus: number = 0;\n  totalQCMs: number = 50;\n  totalQuestionnaires: number = 20;\n  totalQuizzes: number = 15;\n  totalCandidates: number = 100;\n  highScoreQuizzes: number = 10;\n  highCorrectAnswersQuestions: number = 30;\n  totalQuestions: number = 0;\n  view: [number, number] = [400, 300]; // Ajuster la taille des graphiques ici\n  showXAxis = true;\n  showYAxis = true;\n  gradient = false;\n  showLegend = true;\n  showXAxisLabel = true;\n  showYAxisLabel = true;\n  xAxisLabel = 'Étoiles';\n  yAxisLabel = 'Nombre';\n\n  // Définition du schéma de couleur\n  colorScheme: Color = {\n    name: 'custom',\n    selectable: true,\n    group: ScaleType.Ordinal,\n    domain: ['#00214F', '#F6E211', '#E7E6E6']\n  };\n  \n  data: any[] = [];\n  barData: any[] = [];\n  pieData: any[] = [];\n\n  constructor(\n    private avisClientService: AvisClientService,\n    private reponseService: ReponseService,\n    private questionService: QuestionService,\n    private questionnaireService: QuestionnaireService,\n    private qcmService: QCMService,\n    private quizService: QuizService,\n    private candidatService: CandidatService\n  ) { }\n\n  ngOnInit(): void {\n    this.fetchStatistiques();\n    this.fetchCountReponsesByScore();\n    this.fetchStatistiquesCount();\n  }\n\n  fetchCountReponsesByScore() {\n    this.reponseService.getCountReponsesByScore().subscribe(\n      (result: any) => {\n        console.log('Pie Data received:', result); \n        this.reponses65Plus = result.reponses65Plus;\n        this.reponses85Plus = result.reponses85Plus;\n\n        this.pieData = [\n          { name: '> 65%', value: this.reponses65Plus },\n          { name: '> 85%', value: this.reponses85Plus }\n        ];\n\n        console.log('Updated Pie Data:', this.pieData); \n      },\n      (error: any) => {\n        console.error('Error fetching count of responses by score:', error);\n      }\n    );\n  }\n\n  fetchStatistiques(): void {\n    this.avisClientService.getAvisCountByStars().subscribe(statistiques => {\n      this.barData = Object.keys(statistiques).map(rating => ({\n        name: `${rating} étoile(s)`,\n        value: statistiques[rating]\n      }));\n    });\n  }\n\n  fetchStatistiquesCount(): void {\n    this.candidatService.getTotalCandidatsCount().subscribe(count => {\n      this.totalCandidates = count;\n      this.updateChartData();\n    });\n    \n    this.questionService.getTotalQuestionCount().subscribe(count => {\n      this.totalQuestions = count;\n      this.updateChartData();\n    });\n\n    this.questionnaireService.getTotalQuestionnaireCount().subscribe(count => {\n      this.totalQuestionnaires = count;\n      this.updateChartData();\n    });\n\n    /*this.qcmService.getTotalQcmCount().subscribe(count => {\n      this.totalQCMs = count;\n      this.updateChartData();\n    });*/\n\n    this.quizService.getTotalQuizCount().subscribe(count => {\n      this.totalQuizzes = count;\n      this.updateChartData();\n    });\n  }\n\n  updateChartData(): void {\n    this.data = [\n      { name: 'Total Questions', value: this.totalQuestions },\n      { name: 'Total Questionnaires', value: this.totalQuestionnaires },\n      { name: 'Total QCMs', value: this.totalQCMs },\n      { name: 'Total Quizzes', value: this.totalQuizzes },\n      { name: 'Total Candidats', value: this.totalCandidates }\n    ];\n    console.log('Updated Bar Data:', this.data); \n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}