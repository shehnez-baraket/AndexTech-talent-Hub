{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"../../Services/QuestionService\";\nimport * as i4 from \"@angular/material/snack-bar\";\nimport * as i5 from \"@angular/common\";\nfunction ModifierQuestionsAdminComponent_option_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 13);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const niveau_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", niveau_r2.value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(niveau_r2.label);\n  }\n}\nfunction ModifierQuestionsAdminComponent_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14)(1, \"label\", 15);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"input\", 16);\n    i0.ɵɵelementStart(4, \"label\", 15);\n    i0.ɵɵtext(5, \"Correcte\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(6, \"input\", 17);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const i_r4 = ctx.index;\n    i0.ɵɵproperty(\"formGroupName\", i_r4);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate1(\"for\", \"texte-\", i_r4, \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"Option \", i_r4 + 1, \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate1(\"id\", \"texte-\", i_r4, \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate1(\"for\", \"estCorrect-\", i_r4, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate1(\"id\", \"estCorrect-\", i_r4, \"\");\n  }\n}\nexport class ModifierQuestionsAdminComponent {\n  constructor(route, router, formBuilder, questionService, snackBar) {\n    this.route = route;\n    this.router = router;\n    this.formBuilder = formBuilder;\n    this.questionService = questionService;\n    this.snackBar = snackBar;\n    this.niveaux = [{\n      value: 0,\n      label: 'Débutant'\n    }, {\n      value: 1,\n      label: 'Intermédiaire'\n    }, {\n      value: 2,\n      label: 'Expert'\n    }];\n    this.questionForm = this.formBuilder.group({\n      texte: ['', Validators.required],\n      domaine: ['', Validators.required],\n      niveau: [null, Validators.required],\n      options: this.formBuilder.array([])\n    });\n    this.optionsFormArray = this.questionForm.get('options');\n  }\n  ngOnInit() {\n    this.route.params.subscribe(params => {\n      this.questionId = +params['id'];\n      this.loadQuestion(this.questionId);\n    });\n  }\n  loadQuestion(id) {\n    this.questionService.getQuestionById(id).subscribe(question => {\n      this.question = question;\n      this.questionForm.patchValue({\n        texte: question.texte,\n        domaine: question.domaine,\n        niveau: question.niveauId\n      });\n      this.loadOptionsForQuestion(id);\n    });\n  }\n  loadOptionsForQuestion(questionId) {\n    this.questionService.getOptionsForQuestion(questionId).subscribe(options => {\n      this.optionsFormArray.clear();\n      options.forEach(option => {\n        this.optionsFormArray.push(this.formBuilder.group({\n          texte: [option.texte, Validators.required],\n          estCorrect: [option.estCorrect]\n        }));\n      });\n    });\n  }\n  onSubmit() {\n    if (this.questionForm.invalid) {\n      return;\n    }\n    const updatedQuestion = {\n      questionId: this.questionId,\n      texte: this.questionForm.value.texte,\n      domaine: this.questionForm.value.domaine,\n      niveauId: this.questionForm.value.niveau,\n      option: this.optionsFormArray.value,\n      point: this.questionForm.value.point // Récupérer les valeurs des options depuis le formulaire\n    };\n\n    this.questionService.updateQuestion(this.questionId, updatedQuestion).subscribe(() => {\n      this.snackBar.open('Question modifiée avec succès', 'Fermer', {\n        duration: 3000\n      });\n      this.router.navigate(['/tableauBord/listeQuestion']);\n    });\n  }\n  onCancel() {\n    // Logique pour annuler la modification\n  }\n  static #_ = this.ɵfac = function ModifierQuestionsAdminComponent_Factory(t) {\n    return new (t || ModifierQuestionsAdminComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.QuestionService), i0.ɵɵdirectiveInject(i4.MatSnackBar));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ModifierQuestionsAdminComponent,\n    selectors: [[\"app-modifier-questions-admin\"]],\n    decls: 21,\n    vars: 3,\n    consts: [[1, \"container\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"texte\"], [\"id\", \"texte\", \"formControlName\", \"texte\", \"type\", \"text\"], [\"for\", \"domaine\"], [\"id\", \"domaine\", \"formControlName\", \"domaine\", \"type\", \"text\"], [\"for\", \"niveau\"], [\"id\", \"niveau\", \"formControlName\", \"niveau\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"formArrayName\", \"options\", 1, \"options-container\"], [\"class\", \"option-group\", 3, \"formGroupName\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"submit\", 1, \"btnModif\"], [3, \"value\"], [1, \"option-group\", 3, \"formGroupName\"], [3, \"for\"], [\"formControlName\", \"texte\", \"type\", \"text\", 3, \"id\"], [\"type\", \"checkbox\", \"formControlName\", \"estCorrect\", 3, \"id\"]],\n    template: function ModifierQuestionsAdminComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h1\");\n        i0.ɵɵtext(2, \"Modifier Question\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"form\", 1);\n        i0.ɵɵlistener(\"ngSubmit\", function ModifierQuestionsAdminComponent_Template_form_ngSubmit_3_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(4, \"div\", 2)(5, \"label\", 3);\n        i0.ɵɵtext(6, \"Texte\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(7, \"input\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"div\", 2)(9, \"label\", 5);\n        i0.ɵɵtext(10, \"Domaine\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(11, \"input\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"div\", 2)(13, \"label\", 7);\n        i0.ɵɵtext(14, \"Niveau\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"select\", 8);\n        i0.ɵɵtemplate(16, ModifierQuestionsAdminComponent_option_16_Template, 2, 2, \"option\", 9);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(17, \"div\", 10);\n        i0.ɵɵtemplate(18, ModifierQuestionsAdminComponent_div_18_Template, 7, 6, \"div\", 11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"button\", 12);\n        i0.ɵɵtext(20, \"Enregistrer\");\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formGroup\", ctx.questionForm);\n        i0.ɵɵadvance(13);\n        i0.ɵɵproperty(\"ngForOf\", ctx.niveaux);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.optionsFormArray.controls);\n      }\n    },\n    dependencies: [i2.ɵNgNoValidate, i2.NgSelectOption, i2.ɵNgSelectMultipleOption, i2.DefaultValueAccessor, i2.CheckboxControlValueAccessor, i2.SelectControlValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i5.NgForOf, i2.FormGroupDirective, i2.FormControlName, i2.FormGroupName, i2.FormArrayName],\n    styles: [\".container[_ngcontent-%COMP%] {\\r\\n  max-width: 60%;\\r\\n  margin: 20px auto;\\r\\n  padding: 20px;\\r\\n  background-color: #fff;\\r\\n  border-radius: 10px;\\r\\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\\r\\n  display: flex;\\r\\n  justify-content: center;\\r\\n  align-items: center;\\r\\n  flex-direction: column;\\r\\n}\\r\\n\\r\\n.form-group[_ngcontent-%COMP%] {\\r\\n  margin-bottom: 20px;\\r\\n}\\r\\n\\r\\nlabel[_ngcontent-%COMP%] {\\r\\n  font-weight: bold;\\r\\n}\\r\\n\\r\\ninput[type=\\\"text\\\"][_ngcontent-%COMP%], select[_ngcontent-%COMP%] {\\r\\n  width: 100%;\\r\\n  padding: 10px;\\r\\n  border: 1px solid #ccc;\\r\\n  border-radius: 4px;\\r\\n  box-sizing: border-box;\\r\\n}\\r\\n\\r\\nbutton[_ngcontent-%COMP%] {\\r\\n  padding: 10px 20px;\\r\\n  cursor: pointer;\\r\\n  border: none;\\r\\n  background-color: #2c216e;\\r\\n  color: white;\\r\\n  border-radius: 5px;\\r\\n}\\r\\n\\r\\n.btnAjouter[_ngcontent-%COMP%] {\\r\\n  margin-top: 20px;\\r\\n  width: 100%;\\r\\n}\\r\\n\\r\\n.options-container[_ngcontent-%COMP%] {\\r\\n  margin-top: 20px;\\r\\n  width: 100%;\\r\\n}\\r\\n\\r\\n.option-group[_ngcontent-%COMP%] {\\r\\n  display: flex;\\r\\n  align-items: center;\\r\\n  margin-bottom: 10px;\\r\\n}\\r\\n\\r\\n.option-group[_ngcontent-%COMP%]   input[type=\\\"text\\\"][_ngcontent-%COMP%] {\\r\\n  flex: 1;\\r\\n  margin-right: 10px;\\r\\n}\\r\\n\\r\\n.option-group[_ngcontent-%COMP%]   input[type=\\\"checkbox\\\"][_ngcontent-%COMP%] {\\r\\n  margin-left: 10px;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvUXVlc3Rpb25zL21vZGlmaWVyLXF1ZXN0aW9ucy1hZG1pbi9tb2RpZmllci1xdWVzdGlvbnMtYWRtaW4uY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGNBQWM7RUFDZCxpQkFBaUI7RUFDakIsYUFBYTtFQUNiLHNCQUFzQjtFQUN0QixtQkFBbUI7RUFDbkIsdUNBQXVDO0VBQ3ZDLGFBQWE7RUFDYix1QkFBdUI7RUFDdkIsbUJBQW1CO0VBQ25CLHNCQUFzQjtBQUN4Qjs7QUFFQTtFQUNFLG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLGlCQUFpQjtBQUNuQjs7QUFFQTs7RUFFRSxXQUFXO0VBQ1gsYUFBYTtFQUNiLHNCQUFzQjtFQUN0QixrQkFBa0I7RUFDbEIsc0JBQXNCO0FBQ3hCOztBQUVBO0VBQ0Usa0JBQWtCO0VBQ2xCLGVBQWU7RUFDZixZQUFZO0VBQ1oseUJBQXlCO0VBQ3pCLFlBQVk7RUFDWixrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSxnQkFBZ0I7RUFDaEIsV0FBVztBQUNiOztBQUVBO0VBQ0UsZ0JBQWdCO0VBQ2hCLFdBQVc7QUFDYjs7QUFFQTtFQUNFLGFBQWE7RUFDYixtQkFBbUI7RUFDbkIsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0UsT0FBTztFQUNQLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLGlCQUFpQjtBQUNuQiIsInNvdXJjZXNDb250ZW50IjpbIi5jb250YWluZXIge1xyXG4gIG1heC13aWR0aDogNjAlO1xyXG4gIG1hcmdpbjogMjBweCBhdXRvO1xyXG4gIHBhZGRpbmc6IDIwcHg7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcclxuICBib3JkZXItcmFkaXVzOiAxMHB4O1xyXG4gIGJveC1zaGFkb3c6IDAgMCAxMHB4IHJnYmEoMCwgMCwgMCwgMC4zKTtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxufVxyXG5cclxuLmZvcm0tZ3JvdXAge1xyXG4gIG1hcmdpbi1ib3R0b206IDIwcHg7XHJcbn1cclxuXHJcbmxhYmVsIHtcclxuICBmb250LXdlaWdodDogYm9sZDtcclxufVxyXG5cclxuaW5wdXRbdHlwZT1cInRleHRcIl0sXHJcbnNlbGVjdCB7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgcGFkZGluZzogMTBweDtcclxuICBib3JkZXI6IDFweCBzb2xpZCAjY2NjO1xyXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcclxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xyXG59XHJcblxyXG5idXR0b24ge1xyXG4gIHBhZGRpbmc6IDEwcHggMjBweDtcclxuICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgYm9yZGVyOiBub25lO1xyXG4gIGJhY2tncm91bmQtY29sb3I6ICMyYzIxNmU7XHJcbiAgY29sb3I6IHdoaXRlO1xyXG4gIGJvcmRlci1yYWRpdXM6IDVweDtcclxufVxyXG5cclxuLmJ0bkFqb3V0ZXIge1xyXG4gIG1hcmdpbi10b3A6IDIwcHg7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbn1cclxuXHJcbi5vcHRpb25zLWNvbnRhaW5lciB7XHJcbiAgbWFyZ2luLXRvcDogMjBweDtcclxuICB3aWR0aDogMTAwJTtcclxufVxyXG5cclxuLm9wdGlvbi1ncm91cCB7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gIG1hcmdpbi1ib3R0b206IDEwcHg7XHJcbn1cclxuXHJcbi5vcHRpb24tZ3JvdXAgaW5wdXRbdHlwZT1cInRleHRcIl0ge1xyXG4gIGZsZXg6IDE7XHJcbiAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xyXG59XHJcblxyXG4ub3B0aW9uLWdyb3VwIGlucHV0W3R5cGU9XCJjaGVja2JveFwiXSB7XHJcbiAgbWFyZ2luLWxlZnQ6IDEwcHg7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":"AACA,SAAiCA,UAAU,QAAgC,gBAAgB;;;;;;;;;ICiBrFC,kCAA8D;IAAAA,YAAkB;IAAAA,iBAAS;;;;IAAlDA,uCAAsB;IAACA,eAAkB;IAAlBA,qCAAkB;;;;;IAOlFA,+BAA8G;IACnFA,YAAgB;IAAAA,iBAAQ;IACjDA,4BAA4D;IAC5DA,iCAA8B;IAAAA,wBAAQ;IAAAA,iBAAQ;IAC9CA,4BAA0E;IAC5EA,iBAAM;;;;IAL+DA,oCAAmB;IAC/EA,eAAiB;IAAjBA,oDAAiB;IAACA,eAAgB;IAAhBA,8CAAgB;IAClCA,eAAgB;IAAhBA,mDAAgB;IAChBA,eAAsB;IAAtBA,yDAAsB;IACtBA,eAAqB;IAArBA,wDAAqB;;;ADhBlC,OAAM,MAAOC,+BAA+B;EAW1CC,YACUC,KAAqB,EACrBC,MAAc,EACdC,WAAwB,EACxBC,eAAgC,EAChCC,QAAqB;IAJrB,UAAK,GAALJ,KAAK;IACL,WAAM,GAANC,MAAM;IACN,gBAAW,GAAXC,WAAW;IACX,oBAAe,GAAfC,eAAe;IACf,aAAQ,GAARC,QAAQ;IAXlB,YAAO,GAAG,CACR;MAAEC,KAAK,EAAE,CAAC;MAAEC,KAAK,EAAE;IAAU,CAAE,EAC/B;MAAED,KAAK,EAAE,CAAC;MAAEC,KAAK,EAAE;IAAe,CAAE,EACpC;MAAED,KAAK,EAAE,CAAC;MAAEC,KAAK,EAAE;IAAQ,CAAE,CAC9B;IASC,IAAI,CAACC,YAAY,GAAG,IAAI,CAACL,WAAW,CAACM,KAAK,CAAC;MACzCC,KAAK,EAAE,CAAC,EAAE,EAAEb,UAAU,CAACc,QAAQ,CAAC;MAChCC,OAAO,EAAE,CAAC,EAAE,EAAEf,UAAU,CAACc,QAAQ,CAAC;MAClCE,MAAM,EAAE,CAAC,IAAI,EAAEhB,UAAU,CAACc,QAAQ,CAAC;MACnCG,OAAO,EAAE,IAAI,CAACX,WAAW,CAACY,KAAK,CAAC,EAAE;KACnC,CAAC;IACF,IAAI,CAACC,gBAAgB,GAAG,IAAI,CAACR,YAAY,CAACS,GAAG,CAAC,SAAS,CAAc;EACvE;EAEAC,QAAQ;IACN,IAAI,CAACjB,KAAK,CAACkB,MAAM,CAACC,SAAS,CAACD,MAAM,IAAG;MACnC,IAAI,CAACE,UAAU,GAAG,CAACF,MAAM,CAAC,IAAI,CAAC;MAC/B,IAAI,CAACG,YAAY,CAAC,IAAI,CAACD,UAAU,CAAC;IACpC,CAAC,CAAC;EACJ;EAEAC,YAAY,CAACC,EAAU;IACrB,IAAI,CAACnB,eAAe,CAACoB,eAAe,CAACD,EAAE,CAAC,CAACH,SAAS,CAACK,QAAQ,IAAG;MAC5D,IAAI,CAACA,QAAQ,GAAGA,QAAQ;MACxB,IAAI,CAACjB,YAAY,CAACkB,UAAU,CAAC;QAC3BhB,KAAK,EAAEe,QAAQ,CAACf,KAAK;QACrBE,OAAO,EAAEa,QAAQ,CAACb,OAAO;QACzBC,MAAM,EAAEY,QAAQ,CAACE;OAClB,CAAC;MACF,IAAI,CAACC,sBAAsB,CAACL,EAAE,CAAC;IACjC,CAAC,CAAC;EACJ;EAEAK,sBAAsB,CAACP,UAAkB;IACvC,IAAI,CAACjB,eAAe,CAACyB,qBAAqB,CAACR,UAAU,CAAC,CAACD,SAAS,CAACN,OAAO,IAAG;MACzE,IAAI,CAACE,gBAAgB,CAACc,KAAK,EAAE;MAC7BhB,OAAO,CAACiB,OAAO,CAACC,MAAM,IAAG;QACvB,IAAI,CAAChB,gBAAgB,CAACiB,IAAI,CACxB,IAAI,CAAC9B,WAAW,CAACM,KAAK,CAAC;UACrBC,KAAK,EAAE,CAACsB,MAAM,CAACtB,KAAK,EAAEb,UAAU,CAACc,QAAQ,CAAC;UAC1CuB,UAAU,EAAE,CAACF,MAAM,CAACE,UAAU;SAC/B,CAAC,CACH;MACH,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEAC,QAAQ;IACN,IAAI,IAAI,CAAC3B,YAAY,CAAC4B,OAAO,EAAE;MAC7B;;IAGF,MAAMC,eAAe,GAAa;MAChChB,UAAU,EAAE,IAAI,CAACA,UAAU;MAC3BX,KAAK,EAAE,IAAI,CAACF,YAAY,CAACF,KAAK,CAACI,KAAK;MACpCE,OAAO,EAAE,IAAI,CAACJ,YAAY,CAACF,KAAK,CAACM,OAAO;MACxCe,QAAQ,EAAE,IAAI,CAACnB,YAAY,CAACF,KAAK,CAACO,MAAM;MACxCmB,MAAM,EAAE,IAAI,CAAChB,gBAAgB,CAACV,KAAK;MACnCgC,KAAK,EAAE,IAAI,CAAC9B,YAAY,CAACF,KAAK,CAACgC,KAAK,CAAE;KAEvC;;IAED,IAAI,CAAClC,eAAe,CAACmC,cAAc,CAAC,IAAI,CAAClB,UAAU,EAAEgB,eAAe,CAAC,CAClEjB,SAAS,CAAC,MAAK;MACd,IAAI,CAACf,QAAQ,CAACmC,IAAI,CAAC,+BAA+B,EAAE,QAAQ,EAAE;QAC5DC,QAAQ,EAAE;OACX,CAAC;MACF,IAAI,CAACvC,MAAM,CAACwC,QAAQ,CAAC,CAAC,4BAA4B,CAAC,CAAC;IACtD,CAAC,CAAC;EACN;EAGAC,QAAQ;IACN;EAAA;EACD;qBAvFU5C,+BAA+B;EAAA;EAAA;UAA/BA,+BAA+B;IAAA6C;IAAAC;IAAAC;IAAAC;IAAAC;MAAA;QCb5ClD,8BAAuB;QAEjBA,iCAAiB;QAAAA,iBAAK;QAC5BA,+BAAyD;QAAxBA;UAAA,OAAYmD,cAAU;QAAA,EAAC;QACtDnD,8BAAwB;QACHA,qBAAK;QAAAA,iBAAQ;QAChCA,2BAAsD;QACxDA,iBAAM;QAENA,8BAAwB;QACDA,wBAAO;QAAAA,iBAAQ;QACpCA,4BAA0D;QAC5DA,iBAAM;QAENA,+BAAwB;QACFA,uBAAM;QAAAA,iBAAQ;QAElCA,kCAA6C;QAC3CA,wFAAyF;QAC3FA,iBAAS;QAKXA,gCAAuD;QACrDA,mFAKM;QACRA,iBAAM;QAENA,mCAAuC;QAAAA,4BAAW;QAAAA,iBAAS;;;QA9BvDA,eAA0B;QAA1BA,4CAA0B;QAeCA,gBAAU;QAAVA,qCAAU;QAOfA,eAA8B;QAA9BA,uDAA8B","names":["Validators","i0","ModifierQuestionsAdminComponent","constructor","route","router","formBuilder","questionService","snackBar","value","label","questionForm","group","texte","required","domaine","niveau","options","array","optionsFormArray","get","ngOnInit","params","subscribe","questionId","loadQuestion","id","getQuestionById","question","patchValue","niveauId","loadOptionsForQuestion","getOptionsForQuestion","clear","forEach","option","push","estCorrect","onSubmit","invalid","updatedQuestion","point","updateQuestion","open","duration","navigate","onCancel","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\shehn\\Music\\Andex PFE\\FrontEnd\\src\\app\\Questions\\modifier-questions-admin\\modifier-questions-admin.component.ts","C:\\Users\\shehn\\Music\\Andex PFE\\FrontEnd\\src\\app\\Questions\\modifier-questions-admin\\modifier-questions-admin.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormArray, FormControl } from '@angular/forms';\nimport { QuestionService } from '../../Services/QuestionService'; \nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Question } from '../../models/Question';\nimport { Option } from 'src/app/models/Option';\n\n@Component({\n  selector: 'app-modifier-questions-admin',\n  templateUrl: './modifier-questions-admin.component.html',\n  styleUrls: ['./modifier-questions-admin.component.css']\n})\nexport class ModifierQuestionsAdminComponent implements OnInit {\n  questionId!: number;\n  question!: Question;\n  questionForm!: FormGroup;\n  optionsFormArray!: FormArray;\n  niveaux = [\n    { value: 0, label: 'Débutant' },\n    { value: 1, label: 'Intermédiaire' },\n    { value: 2, label: 'Expert' }\n  ];\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private formBuilder: FormBuilder,\n    private questionService: QuestionService,\n    private snackBar: MatSnackBar\n  ) {\n    this.questionForm = this.formBuilder.group({\n      texte: ['', Validators.required],\n      domaine: ['', Validators.required],\n      niveau: [null, Validators.required],\n      options: this.formBuilder.array([])\n    });\n    this.optionsFormArray = this.questionForm.get('options') as FormArray;\n  }\n\n  ngOnInit() {\n    this.route.params.subscribe(params => {\n      this.questionId = +params['id'];\n      this.loadQuestion(this.questionId);\n    });\n  }\n\n  loadQuestion(id: number) {\n    this.questionService.getQuestionById(id).subscribe(question => {\n      this.question = question;\n      this.questionForm.patchValue({\n        texte: question.texte,\n        domaine: question.domaine,\n        niveau: question.niveauId\n      });\n      this.loadOptionsForQuestion(id);\n    });\n  }\n\n  loadOptionsForQuestion(questionId: number) {\n    this.questionService.getOptionsForQuestion(questionId).subscribe(options => {\n      this.optionsFormArray.clear();\n      options.forEach(option => {\n        this.optionsFormArray.push(\n          this.formBuilder.group({\n            texte: [option.texte, Validators.required],\n            estCorrect: [option.estCorrect]\n          })\n        );\n      });\n    });\n  }\n\n  onSubmit() {\n    if (this.questionForm.invalid) {\n      return;\n    }\n  \n    const updatedQuestion: Question = {\n      questionId: this.questionId,\n      texte: this.questionForm.value.texte,\n      domaine: this.questionForm.value.domaine,\n      niveauId: this.questionForm.value.niveau,\n      option: this.optionsFormArray.value,\n      point: this.questionForm.value.point  // Récupérer les valeurs des options depuis le formulaire\n\n    };\n  \n    this.questionService.updateQuestion(this.questionId, updatedQuestion)\n      .subscribe(() => {\n        this.snackBar.open('Question modifiée avec succès', 'Fermer', {\n          duration: 3000\n        });\n        this.router.navigate(['/tableauBord/listeQuestion']);\n      });\n  }\n  \n\n  onCancel() {\n    // Logique pour annuler la modification\n  }\n}\n","<div class=\"container\">\n    \n  <h1>Modifier Question</h1>\n<form [formGroup]=\"questionForm\" (ngSubmit)=\"onSubmit()\">\n  <div class=\"form-group\">\n    <label for=\"texte\">Texte</label>\n    <input id=\"texte\" formControlName=\"texte\" type=\"text\">\n  </div>\n\n  <div class=\"form-group\">\n    <label for=\"domaine\">Domaine</label>\n    <input id=\"domaine\" formControlName=\"domaine\" type=\"text\">\n  </div>\n\n  <div class=\"form-group\">\n    <label for=\"niveau\">Niveau</label>\n\n    <select id=\"niveau\" formControlName=\"niveau\">\n      <option *ngFor=\"let niveau of niveaux\" [value]=\"niveau.value\">{{ niveau.label }}</option>\n    </select>\n    \n    \n  </div>\n\n  <div formArrayName=\"options\" class=\"options-container\">\n    <div *ngFor=\"let option of optionsFormArray.controls; let i = index\" [formGroupName]=\"i\" class=\"option-group\">\n      <label for=\"texte-{{i}}\">Option {{i + 1}}</label>\n      <input id=\"texte-{{i}}\" formControlName=\"texte\" type=\"text\">\n      <label for=\"estCorrect-{{i}}\">Correcte</label>\n      <input id=\"estCorrect-{{i}}\" type=\"checkbox\" formControlName=\"estCorrect\">\n    </div>\n  </div>\n\n  <button type=\"submit\" class=\"btnModif\">Enregistrer</button>\n</form>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}