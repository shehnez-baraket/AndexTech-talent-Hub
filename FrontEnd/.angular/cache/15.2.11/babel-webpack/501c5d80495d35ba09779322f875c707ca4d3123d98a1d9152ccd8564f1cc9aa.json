{"ast":null,"code":"import { ScaleType } from '@swimlane/ngx-charts';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../Services/CandidatService\";\nimport * as i2 from \"../Services/QuestionService\";\nimport * as i3 from \"../Services/Questionnaire\";\nimport * as i4 from \"../Services/QuizService\";\nimport * as i5 from \"../Services/AvisClientService\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"@swimlane/ngx-charts\";\nfunction StatistiquesComponent_ngx_charts_pie_chart_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"ngx-charts-pie-chart\", 6);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"view\", ctx_r0.view)(\"scheme\", ctx_r0.colorScheme)(\"results\", ctx_r0.pieData)(\"legend\", ctx_r0.showLegend)(\"explodeSlices\", false)(\"doughnut\", false)(\"labels\", true);\n  }\n}\nexport class StatistiquesComponent {\n  constructor(candidatService, questionService, questionnaireService, quizService, avisService) {\n    this.candidatService = candidatService;\n    this.questionService = questionService;\n    this.questionnaireService = questionnaireService;\n    this.quizService = quizService;\n    this.avisService = avisService;\n    this.view = [350, 250]; // Taille des graphiques\n    // options\n    this.showXAxis = true;\n    this.showYAxis = true;\n    this.gradient = false;\n    this.showLegend = true;\n    this.showXAxisLabel = true;\n    this.xAxisLabel = '';\n    this.showYAxisLabel = true;\n    this.yAxisLabel = '';\n    this.colorScheme = {\n      name: 'custom',\n      selectable: true,\n      group: ScaleType.Ordinal,\n      domain: ['#00214F', '#E7E6E6', '#F6E211'] // Bleu, Jaune, Gris\n    };\n\n    this.barChartData = [];\n  }\n  ngOnInit() {\n    this.loadChartData();\n    this.loadAvisCountsByStars();\n  }\n  loadAvisCountsByStars() {\n    this.avisCounts$ = this.avisService.getAvisCountByStars();\n  }\n  loadChartData() {\n    this.candidatService.getTotalCandidatsCount().subscribe(count => {\n      this.totalCandidatsCount = count;\n      this.updateBarChartData();\n      console.log(this.totalCandidatsCount);\n    });\n    this.questionService.getTotalQuestionCount().subscribe(count => {\n      this.totalQuestionsCount = count;\n      this.updateBarChartData();\n      console.log(this.totalQuestionsCount);\n    });\n    this.questionnaireService.getTotalQuestionnaireCount().subscribe(count => {\n      this.totalQuestionnairesCount = count;\n      this.updateBarChartData();\n      console.log(this.totalQuestionnairesCount);\n    });\n    this.quizService.getTotalQuizCount().subscribe(count => {\n      this.totalQuizzesCount = count;\n      this.updateBarChartData();\n    });\n  }\n  updateBarChartData() {\n    this.barChartData = [{\n      name: 'Candidats',\n      series: [{\n        name: 'Total',\n        value: this.totalCandidatsCount\n      }]\n    }, {\n      name: 'Questions',\n      series: [{\n        name: 'Total',\n        value: this.totalQuestionsCount\n      }]\n    }, {\n      name: 'Questionnaires',\n      series: [{\n        name: 'Total',\n        value: this.totalQuestionnairesCount\n      }]\n    }, {\n      name: 'Quizzes',\n      series: [{\n        name: 'Total',\n        value: this.totalQuizzesCount\n      }]\n    }];\n  }\n  static #_ = this.ɵfac = function StatistiquesComponent_Factory(t) {\n    return new (t || StatistiquesComponent)(i0.ɵɵdirectiveInject(i1.CandidatService), i0.ɵɵdirectiveInject(i2.QuestionService), i0.ɵɵdirectiveInject(i3.QuestionnaireService), i0.ɵɵdirectiveInject(i4.QuizService), i0.ɵɵdirectiveInject(i5.AvisClientService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: StatistiquesComponent,\n    selectors: [[\"app-statistiques\"]],\n    decls: 13,\n    vars: 13,\n    consts: [[1, \"statistics-dashboard\"], [1, \"chart-container\"], [1, \"chart-title\"], [3, \"view\", \"scheme\", \"results\", \"gradient\", \"legend\", \"showXAxisLabel\", \"showYAxisLabel\", \"xAxisLabel\", \"yAxisLabel\"], [3, \"view\", \"scheme\", \"results\", \"legend\", \"explodeSlices\", \"doughnut\", \"labels\", 4, \"ngIf\"], [3, \"view\", \"scheme\", \"results\"], [3, \"view\", \"scheme\", \"results\", \"legend\", \"explodeSlices\", \"doughnut\", \"labels\"]],\n    template: function StatistiquesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h3\", 2);\n        i0.ɵɵtext(3, \"Distribution des \\u00C9valuations\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(4, \"ngx-charts-bar-horizontal\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\", 1)(6, \"h3\", 2);\n        i0.ɵɵtext(7, \"Pourcentage de R\\u00E9ponses Correctes\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(8, StatistiquesComponent_ngx_charts_pie_chart_8_Template, 1, 7, \"ngx-charts-pie-chart\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\", 1)(10, \"h3\", 2);\n        i0.ɵɵtext(11, \"Statistiques Globales\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(12, \"ngx-charts-number-card\", 5);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"view\", ctx.view)(\"scheme\", ctx.colorScheme)(\"results\", ctx.barData)(\"gradient\", ctx.gradient)(\"legend\", ctx.showLegend)(\"showXAxisLabel\", ctx.showXAxisLabel)(\"showYAxisLabel\", ctx.showYAxisLabel)(\"xAxisLabel\", ctx.xAxisLabel)(\"yAxisLabel\", ctx.yAxisLabel);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.pieData.length > 0);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"view\", ctx.view)(\"scheme\", ctx.colorScheme)(\"results\", ctx.data);\n      }\n    },\n    dependencies: [i6.NgIf, i7.BarHorizontalComponent, i7.NumberCardComponent, i7.PieChartComponent],\n    styles: [\".statistics-container[_ngcontent-%COMP%] {\\r\\n  display: flex;\\r\\n  flex-wrap: wrap;\\r\\n  justify-content: space-around;\\r\\n}\\r\\n.mat-card-title-custom[_ngcontent-%COMP%] {\\r\\n  text-align: center;\\r\\n  font-size: 16px; \\r\\n}\\r\\n\\r\\nmat-card[_ngcontent-%COMP%] {\\r\\n  width: 45%;\\r\\n  margin: 10px;\\r\\n}\\r\\n\\r\\ncanvas[_ngcontent-%COMP%] {\\r\\n  width: 100% !important;\\r\\n  height: 250px !important;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvc3RhdGlzdGlxdWVzL3N0YXRpc3RpcXVlcy5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsYUFBYTtFQUNiLGVBQWU7RUFDZiw2QkFBNkI7QUFDL0I7QUFDQTtFQUNFLGtCQUFrQjtFQUNsQixlQUFlLEVBQUUsbUNBQW1DO0FBQ3REOztBQUVBO0VBQ0UsVUFBVTtFQUNWLFlBQVk7QUFDZDs7QUFFQTtFQUNFLHNCQUFzQjtFQUN0Qix3QkFBd0I7QUFDMUIiLCJzb3VyY2VzQ29udGVudCI6WyIuc3RhdGlzdGljcy1jb250YWluZXIge1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZmxleC13cmFwOiB3cmFwO1xyXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xyXG59XHJcbi5tYXQtY2FyZC10aXRsZS1jdXN0b20ge1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICBmb250LXNpemU6IDE2cHg7IC8qIFRhaWxsZSBkZSBwb2xpY2UgcGVyc29ubmFsaXPDg8KpZSAqL1xyXG59XHJcblxyXG5tYXQtY2FyZCB7XHJcbiAgd2lkdGg6IDQ1JTtcclxuICBtYXJnaW46IDEwcHg7XHJcbn1cclxuXHJcbmNhbnZhcyB7XHJcbiAgd2lkdGg6IDEwMCUgIWltcG9ydGFudDtcclxuICBoZWlnaHQ6IDI1MHB4ICFpbXBvcnRhbnQ7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["ScaleType","i0","StatistiquesComponent","constructor","candidatService","questionService","questionnaireService","quizService","avisService","name","selectable","group","Ordinal","domain","barChartData","ngOnInit","loadChartData","loadAvisCountsByStars","avisCounts$","getAvisCountByStars","getTotalCandidatsCount","subscribe","count","totalCandidatsCount","updateBarChartData","console","log","getTotalQuestionCount","totalQuestionsCount","getTotalQuestionnaireCount","totalQuestionnairesCount","getTotalQuizCount","totalQuizzesCount","series","value","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\shehn\\Music\\Andex PFE\\FrontEnd\\src\\app\\statistiques\\statistiques.component.ts","C:\\Users\\shehn\\Music\\Andex PFE\\FrontEnd\\src\\app\\statistiques\\statistiques.component.html"],"sourcesContent":["import {  Inject } from '@angular/core';\nimport { CandidatService } from '../Services/CandidatService';\nimport { QuestionService } from '../Services/QuestionService';\nimport { QuestionnaireService } from '../Services/Questionnaire';\nimport { QuizService } from '../Services/QuizService';\nimport { NgxChartsModule } from '@swimlane/ngx-charts';\nimport { Component, OnInit } from '@angular/core';\nimport { ScaleType, Color } from '@swimlane/ngx-charts';\nimport { AvisClientService } from '../Services/AvisClientService';\nimport { Observable } from 'rxjs';\n@Component({\n  selector: 'app-statistiques',\n  templateUrl: './statistiques.component.html',\n  styleUrls: ['./statistiques.component.css']\n})\n\nexport class StatistiquesComponent implements OnInit {\n  barChartData: any[];\n  pieChartData!: any[];\n  lineChartData!: any[];\n  areaChartData!: any[];\n  totalCandidatsCount!: number;\n  totalQuestionsCount!: number;\n  totalQuestionnairesCount!: number;\n  totalQuizzesCount!: number;\n\n  view: [number, number] = [350, 250]; // Taille des graphiques\n\n  // options\n  showXAxis: boolean = true;\n  showYAxis: boolean = true;\n  gradient: boolean = false;\n  showLegend: boolean = true;\n  showXAxisLabel: boolean = true;\n  xAxisLabel: string = '';\n  showYAxisLabel: boolean = true;\n  yAxisLabel: string = '';\n  avisCounts$!: Observable<any>;\n\n  colorScheme: Color = {\n    name: 'custom',\n    selectable: true,\n    group: ScaleType.Ordinal,\n    domain: ['#00214F', '#E7E6E6', '#F6E211'] // Bleu, Jaune, Gris\n  };\n\n  constructor(private candidatService: CandidatService,\n    private questionService: QuestionService,\n    private questionnaireService: QuestionnaireService,\n    private quizService: QuizService,\n    private avisService: AvisClientService\n  ) {this.barChartData = [];\n  }\n\n  ngOnInit(): void {\n    this.loadChartData();\n    this.loadAvisCountsByStars();\n\n  }\n  loadAvisCountsByStars() {\n    this.avisCounts$ = this.avisService.getAvisCountByStars();\n     }\n  loadChartData() {\n    this.candidatService.getTotalCandidatsCount().subscribe((count: number) => {\n      this.totalCandidatsCount = count;\n      this.updateBarChartData();\n      console.log(this.totalCandidatsCount );\n    });\n\n    this.questionService.getTotalQuestionCount().subscribe((count: number) => {\n      this.totalQuestionsCount = count;\n      this.updateBarChartData();\n      console.log(this.totalQuestionsCount );\n    });\n\n    this.questionnaireService.getTotalQuestionnaireCount().subscribe((count: number) => {\n      this.totalQuestionnairesCount = count;\n      this.updateBarChartData();\n      console.log(this.totalQuestionnairesCount );\n    });\n\n    this.quizService.getTotalQuizCount().subscribe((count: number) => {\n      this.totalQuizzesCount = count;\n      this.updateBarChartData();\n    });\n  }\n\n  updateBarChartData() {\n    this.barChartData = [\n      {\n        name: 'Candidats',\n        series: [\n          { name: 'Total', value: this.totalCandidatsCount }\n        ]\n      },\n      {\n        name: 'Questions',\n        series: [\n          { name: 'Total', value: this.totalQuestionsCount }\n        ]\n      },\n      {\n        name: 'Questionnaires',\n        series: [\n          { name: 'Total', value: this.totalQuestionnairesCount }\n        ]\n      },\n      {\n        name: 'Quizzes',\n        series: [\n          { name: 'Total', value: this.totalQuizzesCount }\n        ]\n      }\n    ];\n  }\n}","<div class=\"statistics-dashboard\">\n  <div class=\"chart-container\">\n    <h3 class=\"chart-title\">Distribution des Évaluations</h3>\n    <ngx-charts-bar-horizontal\n      [view]=\"view\"\n      [scheme]=\"colorScheme\"\n      [results]=\"barData\"\n      [gradient]=\"gradient\"\n      [legend]=\"showLegend\"\n      [showXAxisLabel]=\"showXAxisLabel\"\n      [showYAxisLabel]=\"showYAxisLabel\"\n      [xAxisLabel]=\"xAxisLabel\"\n      [yAxisLabel]=\"yAxisLabel\">\n    </ngx-charts-bar-horizontal>\n  </div>\n\n  <div class=\"chart-container\">\n    <h3 class=\"chart-title\">Pourcentage de Réponses Correctes</h3>\n    <ngx-charts-pie-chart\n      *ngIf=\"pieData.length > 0\"\n      [view]=\"view\"\n      [scheme]=\"colorScheme\"\n      [results]=\"pieData\"\n      [legend]=\"showLegend\"\n      [explodeSlices]=\"false\"\n      [doughnut]=\"false\"\n      [labels]=\"true\">\n    </ngx-charts-pie-chart>\n  </div>\n\n  <div class=\"chart-container\">\n    <h3 class=\"chart-title\">Statistiques Globales</h3>\n    <ngx-charts-number-card\n      [view]=\"view\"\n      [scheme]=\"colorScheme\"\n      [results]=\"data\">\n    </ngx-charts-number-card>\n  </div>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}