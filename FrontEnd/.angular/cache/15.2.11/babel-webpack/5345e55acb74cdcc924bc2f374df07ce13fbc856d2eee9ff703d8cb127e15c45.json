{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ReponseService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:5159/api/Reponse';\n  }\n  saveReponse(reponse) {\n    return this.http.post(this.apiUrl, reponse);\n  }\n  calculateScore(reponse) {\n    return this.http.post(`${this.apiUrl}/CalculerScore`, reponse);\n  }\n  genererPdfReponsesCandidat(candidatId) {\n    // Définir les en-têtes pour indiquer que nous attendons un blob en réponse\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      }),\n      responseType: 'blob'\n    };\n    // Appeler l'API pour générer le PDF\n    return this.http.post(`${this.apiUrl}/GenererPdfReponsesCandidat/${candidatId}`, null, httpOptions);\n  }\n  genererPdfResultats(candidatId) {\n    // Définir les en-têtes pour indiquer que nous attendons un blob en réponse\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      }),\n      responseType: 'blob'\n    };\n    // Appeler l'API pour générer le PDF\n    return this.http.post(`${this.apiUrl}/GenererPdfResultats/${candidatId}`, null, httpOptions);\n  }\n  ActiviteCandidatQuiz(candidatId, quizId) {\n    // Définir les en-têtes pour indiquer que nous attendons un blob en réponse\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      }),\n      responseType: 'blob'\n    };\n    // Appeler l'API pour générer le PDF\n    return this.http.post(`${this.apiUrl}/GenererPdfReponsesActivites/${candidatId}/${quizId}`, null, httpOptions);\n  }\n  ReponseCandidatQuiz(candidatId, quizId) {\n    // Définir les en-têtes pour indiquer que nous attendons un blob en réponse\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      }),\n      responseType: 'blob'\n    };\n    // Appeler l'API pour générer le PDF\n    return this.http.post(`${this.apiUrl}/GenererPdfReponsesCandidat/${candidatId}/${quizId}`, null, httpOptions);\n  }\n  static #_ = this.ɵfac = function ReponseService_Factory(t) {\n    return new (t || ReponseService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ReponseService,\n    factory: ReponseService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAQ9D,OAAM,MAAOC,cAAc;EAGzBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,WAAM,GAAG,mCAAmC;EAEZ;EAExCC,WAAW,CAACC,OAAwB;IAClC,OAAO,IAAI,CAACF,IAAI,CAACG,IAAI,CAAkB,IAAI,CAACC,MAAM,EAAEF,OAAO,CAAC;EAC9D;EACAG,cAAc,CAACH,OAAwB;IACrC,OAAO,IAAI,CAACF,IAAI,CAACG,IAAI,CAAS,GAAG,IAAI,CAACC,MAAM,gBAAgB,EAAEF,OAAO,CAAC;EACxE;EACAI,0BAA0B,CAACC,UAAkB;IAC3C;IACA,MAAMC,WAAW,GAAG;MAClBC,OAAO,EAAE,IAAIZ,WAAW,CAAC;QACvB,cAAc,EAAE;OACjB,CAAC;MACFa,YAAY,EAAE;KACf;IAED;IACA,OAAO,IAAI,CAACV,IAAI,CAACG,IAAI,CAAO,GAAG,IAAI,CAACC,MAAM,+BAA+BG,UAAU,EAAE,EAAE,IAAI,EAAEC,WAAW,CAAC;EAC3G;EAEAG,mBAAmB,CAACJ,UAAkB;IACpC;IACA,MAAMC,WAAW,GAAG;MAClBC,OAAO,EAAE,IAAIZ,WAAW,CAAC;QACvB,cAAc,EAAE;OACjB,CAAC;MACFa,YAAY,EAAE;KACf;IAED;IACA,OAAO,IAAI,CAACV,IAAI,CAACG,IAAI,CAAO,GAAG,IAAI,CAACC,MAAM,wBAAwBG,UAAU,EAAE,EAAE,IAAI,EAAEC,WAAW,CAAC;EACpG;EAGAI,oBAAoB,CAACL,UAAkB,EAAEM,MAAc;IACrD;IACA,MAAML,WAAW,GAAG;MAClBC,OAAO,EAAE,IAAIZ,WAAW,CAAC;QACvB,cAAc,EAAE;OACjB,CAAC;MACFa,YAAY,EAAE;KACf;IAED;IACA,OAAO,IAAI,CAACV,IAAI,CAACG,IAAI,CAAO,GAAG,IAAI,CAACC,MAAM,gCAAgCG,UAAU,IAAIM,MAAM,EAAE,EAAE,IAAI,EAAEL,WAAW,CAAC;EACtH;EAGAM,mBAAmB,CAACP,UAAkB,EAAEM,MAAc;IACpD;IACA,MAAML,WAAW,GAAG;MAClBC,OAAO,EAAE,IAAIZ,WAAW,CAAC;QACvB,cAAc,EAAE;OACjB,CAAC;MACFa,YAAY,EAAE;KACf;IAED;IACA,OAAO,IAAI,CAACV,IAAI,CAACG,IAAI,CAAO,GAAG,IAAI,CAACC,MAAM,+BAA+BG,UAAU,IAAIM,MAAM,EAAE,EAAE,IAAI,EAAEL,WAAW,CAAC;EACrH;EAAC;qBA/DUV,cAAc;EAAA;EAAA;WAAdA,cAAc;IAAAiB,SAAdjB,cAAc;IAAAkB,YAFb;EAAM","names":["HttpHeaders","ReponseService","constructor","http","saveReponse","reponse","post","apiUrl","calculateScore","genererPdfReponsesCandidat","candidatId","httpOptions","headers","responseType","genererPdfResultats","ActiviteCandidatQuiz","quizId","ReponseCandidatQuiz","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\shehn\\Music\\Andex PFE\\FrontEnd\\src\\app\\Services\\ReponseService.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { ReponseCandidat } from '../models/ReponseCandidat';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ReponseService {\r\n  private apiUrl = 'http://localhost:5159/api/Reponse'\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  saveReponse(reponse: ReponseCandidat): Observable<ReponseCandidat> {\r\n    return this.http.post<ReponseCandidat>(this.apiUrl, reponse);\r\n  }\r\n  calculateScore(reponse: ReponseCandidat): Observable<number> {\r\n    return this.http.post<number>(`${this.apiUrl}/CalculerScore`, reponse);\r\n  }\r\n  genererPdfReponsesCandidat(candidatId: number): Observable<Blob> {\r\n    // Définir les en-têtes pour indiquer que nous attendons un blob en réponse\r\n    const httpOptions = {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': 'application/json'\r\n      }),\r\n      responseType: 'blob' as 'json'\r\n    };\r\n\r\n    // Appeler l'API pour générer le PDF\r\n    return this.http.post<Blob>(`${this.apiUrl}/GenererPdfReponsesCandidat/${candidatId}`, null, httpOptions);\r\n  }\r\n\r\n  genererPdfResultats(candidatId: number): Observable<Blob> {\r\n    // Définir les en-têtes pour indiquer que nous attendons un blob en réponse\r\n    const httpOptions = {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': 'application/json'\r\n      }),\r\n      responseType: 'blob' as 'json'\r\n    };\r\n\r\n    // Appeler l'API pour générer le PDF\r\n    return this.http.post<Blob>(`${this.apiUrl}/GenererPdfResultats/${candidatId}`, null, httpOptions);\r\n  }\r\n\r\n\r\n  ActiviteCandidatQuiz(candidatId: number, quizId: number): Observable<Blob> {\r\n    // Définir les en-têtes pour indiquer que nous attendons un blob en réponse\r\n    const httpOptions = {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': 'application/json'\r\n      }),\r\n      responseType: 'blob' as 'json'\r\n    };\r\n\r\n    // Appeler l'API pour générer le PDF\r\n    return this.http.post<Blob>(`${this.apiUrl}/GenererPdfReponsesActivites/${candidatId}/${quizId}`, null, httpOptions);\r\n  }\r\n\r\n\r\n  ReponseCandidatQuiz(candidatId: number, quizId: number): Observable<Blob> {\r\n    // Définir les en-têtes pour indiquer que nous attendons un blob en réponse\r\n    const httpOptions = {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': 'application/json'\r\n      }),\r\n      responseType: 'blob' as 'json'\r\n    };\r\n\r\n    // Appeler l'API pour générer le PDF\r\n    return this.http.post<Blob>(`${this.apiUrl}/GenererPdfReponsesCandidat/${candidatId}/${quizId}`, null, httpOptions);\r\n  }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}