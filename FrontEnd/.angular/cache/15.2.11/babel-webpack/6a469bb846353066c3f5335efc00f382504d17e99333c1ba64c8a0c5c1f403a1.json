{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/Services/AdminService\";\nimport * as i3 from \"@angular/material/snack-bar\";\nimport * as i4 from \"@angular/router\";\nexport class AjouterAdminComponent {\n  constructor(formBuilder, adminService, snackBar, router) {\n    this.formBuilder = formBuilder;\n    this.adminService = adminService;\n    this.snackBar = snackBar;\n    this.router = router;\n  }\n  ngOnInit() {\n    this.initForm();\n  }\n  initForm() {\n    this.adminForm = this.formBuilder.group({\n      nom: ['', Validators.required],\n      prenom: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      PasswordHash: ['', Validators.required]\n    });\n  }\n  onSubmit() {\n    if (this.adminForm.invalid) {\n      this.snackBar.open('Formulaire invalide', 'Fermer', {\n        duration: 3000\n      });\n      return;\n    }\n    const admin = this.adminForm.value;\n    // Vérifier si le champ de mot de passe est vide\n    if (!admin.PasswordHash) {\n      this.snackBar.open('Le champ de mot de passe est requis', 'Fermer', {\n        duration: 3000\n      });\n      return;\n    }\n    this.adminService.createAdmin(admin).subscribe(() => {\n      this.snackBar.open('Admin ajouté avec succès', 'Fermer', {\n        duration: 3000\n      });\n      this.router.navigate(['/tableauBord/listeAdmin']);\n    }, error => {\n      if (error.error && error.error.message) {\n        this.snackBar.open(error.error.message, 'Fermer', {\n          duration: 3000\n        });\n      } else {\n        this.snackBar.open('Une erreur est survenue lors de l\\'ajout de l\\'admin', 'Fermer', {\n          duration: 3000\n        });\n      }\n    });\n  }\n  static #_ = this.ɵfac = function AjouterAdminComponent_Factory(t) {\n    return new (t || AjouterAdminComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AdminService), i0.ɵɵdirectiveInject(i3.MatSnackBar), i0.ɵɵdirectiveInject(i4.Router));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AjouterAdminComponent,\n    selectors: [[\"app-ajouter-admin\"]],\n    decls: 22,\n    vars: 1,\n    consts: [[1, \"container\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"nom\"], [\"type\", \"text\", \"id\", \"nom\", \"formControlName\", \"nom\", 1, \"form-control\"], [\"for\", \"prenom\"], [\"type\", \"text\", \"id\", \"prenom\", \"formControlName\", \"prenom\", 1, \"form-control\"], [\"for\", \"email\"], [\"type\", \"email\", \"id\", \"email\", \"formControlName\", \"email\", 1, \"form-control\"], [\"for\", \"PasswordHash\"], [\"type\", \"password\", \"id\", \"password\", \"formControlName\", \"PasswordHash\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btnAjouter\"]],\n    template: function AjouterAdminComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h1\");\n        i0.ɵɵtext(2, \"Ajouter un Administrateur\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"form\", 1);\n        i0.ɵɵlistener(\"ngSubmit\", function AjouterAdminComponent_Template_form_ngSubmit_3_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(4, \"div\", 2)(5, \"label\", 3);\n        i0.ɵɵtext(6, \"Nom :\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(7, \"input\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"div\", 2)(9, \"label\", 5);\n        i0.ɵɵtext(10, \"Pr\\u00E9nom :\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(11, \"input\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"div\", 2)(13, \"label\", 7);\n        i0.ɵɵtext(14, \"Adresse Email :\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(15, \"input\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"div\", 2)(17, \"label\", 9);\n        i0.ɵɵtext(18, \"Mot de passe :\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(19, \"input\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"button\", 11);\n        i0.ɵɵtext(21, \"Ajouter\");\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formGroup\", ctx.adminForm);\n      }\n    },\n    dependencies: [i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n    styles: [\".container[_ngcontent-%COMP%] {\\r\\n    max-width: 60%;\\r\\n    margin: 20px auto;\\r\\n    padding: 20px;\\r\\n    background-color: #fff;\\r\\n    border-radius: 10px;\\r\\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\\r\\n    display: flex; \\r\\n    justify-content: center; \\r\\n    align-items: center; \\r\\n    flex-direction: column; \\r\\n}\\r\\n\\r\\n.form-group[_ngcontent-%COMP%] {\\r\\n    margin-bottom: 20px;\\r\\n}\\r\\n\\r\\nlabel[_ngcontent-%COMP%] {\\r\\n    font-weight: bold;\\r\\n}\\r\\n\\r\\ninput[type=\\\"text\\\"][_ngcontent-%COMP%], input[type=\\\"email\\\"][_ngcontent-%COMP%], input[type=\\\"password\\\"][_ngcontent-%COMP%]  {\\r\\n    width: 100%;\\r\\n    padding: 10px;\\r\\n    border: 1px solid #ccc;\\r\\n    border-radius: 4px;\\r\\n}\\r\\n\\r\\nbutton[_ngcontent-%COMP%] {\\r\\n    padding: 10px 20px;\\r\\n    cursor: pointer;\\r\\n    border: none;\\r\\n    background-color: #2c216e; \\r\\n    color: white;\\r\\n    border-radius: 5px; \\r\\n}\\r\\n\\r\\n.btnAjouter[_ngcontent-%COMP%] {\\r\\n    margin-top: 20px; \\r\\n    width: 100%; \\r\\n}\\r\\nh1[_ngcontent-%COMP%]{\\r\\n    text-align: center;\\r\\n  color: #1b2552;\\r\\n  margin-bottom: 20px;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvQWRtaW4vYWpvdXRlci1hZG1pbi9ham91dGVyLWFkbWluLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxjQUFjO0lBQ2QsaUJBQWlCO0lBQ2pCLGFBQWE7SUFDYixzQkFBc0I7SUFDdEIsbUJBQW1CO0lBQ25CLHVDQUF1QztJQUN2QyxhQUFhLEVBQUUscUJBQXFCO0lBQ3BDLHVCQUF1QixFQUFFLDRCQUE0QjtJQUNyRCxtQkFBbUIsRUFBRSwwQkFBMEI7SUFDL0Msc0JBQXNCLEVBQUUsb0NBQW9DO0FBQ2hFOztBQUVBO0lBQ0ksbUJBQW1CO0FBQ3ZCOztBQUVBO0lBQ0ksaUJBQWlCO0FBQ3JCOztBQUVBOzs7SUFHSSxXQUFXO0lBQ1gsYUFBYTtJQUNiLHNCQUFzQjtJQUN0QixrQkFBa0I7QUFDdEI7O0FBRUE7SUFDSSxrQkFBa0I7SUFDbEIsZUFBZTtJQUNmLFlBQVk7SUFDWix5QkFBeUIsRUFBRSxrQkFBa0I7SUFDN0MsWUFBWTtJQUNaLGtCQUFrQixFQUFFLG9DQUFvQztBQUM1RDs7QUFFQTtJQUNJLGdCQUFnQixFQUFFLDBDQUEwQztJQUM1RCxXQUFXLEVBQUUscUJBQXFCO0FBQ3RDO0FBQ0E7SUFDSSxrQkFBa0I7RUFDcEIsY0FBYztFQUNkLG1CQUFtQjtBQUNyQiIsInNvdXJjZXNDb250ZW50IjpbIi5jb250YWluZXIge1xyXG4gICAgbWF4LXdpZHRoOiA2MCU7XHJcbiAgICBtYXJnaW46IDIwcHggYXV0bztcclxuICAgIHBhZGRpbmc6IDIwcHg7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xyXG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcclxuICAgIGJveC1zaGFkb3c6IDAgMCAxMHB4IHJnYmEoMCwgMCwgMCwgMC4zKTtcclxuICAgIGRpc3BsYXk6IGZsZXg7IC8qIFV0aWxpc2VyIEZsZXhib3ggKi9cclxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOyAvKiBDZW50cmVyIGhvcml6b250YWxlbWVudCAqL1xyXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjsgLyogQ2VudHJlciB2ZXJ0aWNhbGVtZW50ICovXHJcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOyAvKiBBbGlnbmVyIGxlcyDDg8KpbMODwqltZW50cyBlbiBjb2xvbm5lICovXHJcbn1cclxuXHJcbi5mb3JtLWdyb3VwIHtcclxuICAgIG1hcmdpbi1ib3R0b206IDIwcHg7XHJcbn1cclxuXHJcbmxhYmVsIHtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG59XHJcblxyXG5pbnB1dFt0eXBlPVwidGV4dFwiXSxcclxuaW5wdXRbdHlwZT1cImVtYWlsXCJdLFxyXG5pbnB1dFt0eXBlPVwicGFzc3dvcmRcIl0gIHtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgcGFkZGluZzogMTBweDtcclxuICAgIGJvcmRlcjogMXB4IHNvbGlkICNjY2M7XHJcbiAgICBib3JkZXItcmFkaXVzOiA0cHg7XHJcbn1cclxuXHJcbmJ1dHRvbiB7XHJcbiAgICBwYWRkaW5nOiAxMHB4IDIwcHg7XHJcbiAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgICBib3JkZXI6IG5vbmU7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMmMyMTZlOyAvKiBDb3VsZXVyIGJsZXVlICovXHJcbiAgICBjb2xvcjogd2hpdGU7XHJcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7IC8qIENvaW5zIGFycm9uZGlzIHBvdXIgbGVzIGJvdXRvbnMgKi9cclxufVxyXG5cclxuLmJ0bkFqb3V0ZXIge1xyXG4gICAgbWFyZ2luLXRvcDogMjBweDsgLyogQWpvdXQgZCd1bmUgbWFyZ2UgYXUtZGVzc3VzIGR1IGJvdXRvbiAqL1xyXG4gICAgd2lkdGg6IDEwMCU7IC8qIExhcmdldXIgbWF4aW1hbGUgKi9cclxufVxyXG5oMXtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICBjb2xvcjogIzFiMjU1MjtcclxuICBtYXJnaW4tYm90dG9tOiAyMHB4O1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n  });\n}","map":{"version":3,"mappings":"AACA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;;;AASnE,OAAM,MAAOC,qBAAqB;EAIhCC,YAAoBC,WAAwB,EACxBC,YAA0B,EAC1BC,QAAqB,EACrBC,MAAc;IAHd,gBAAW,GAAXH,WAAW;IACX,iBAAY,GAAZC,YAAY;IACZ,aAAQ,GAARC,QAAQ;IACR,WAAM,GAANC,MAAM;EAAW;EAErCC,QAAQ;IACM,IAAI,CAACC,QAAQ,EAAE;EACjB;EACZA,QAAQ;IAEN,IAAI,CAACC,SAAS,GAAG,IAAI,CAACN,WAAW,CAACO,KAAK,CAAC;MACtCC,GAAG,EAAE,CAAC,EAAE,EAAEX,UAAU,CAACY,QAAQ,CAAC;MAC9BC,MAAM,EAAE,CAAC,EAAE,EAAEb,UAAU,CAACY,QAAQ,CAAC;MACjCE,KAAK,EAAE,CAAC,EAAE,EAAE,CAACd,UAAU,CAACY,QAAQ,EAAEZ,UAAU,CAACc,KAAK,CAAC,CAAC;MACpDC,YAAY,EAAE,CAAC,EAAE,EAAEf,UAAU,CAACY,QAAQ;KACvC,CAAC;EAEJ;EAEAI,QAAQ;IACN,IAAI,IAAI,CAACP,SAAS,CAACQ,OAAO,EAAE;MAC1B,IAAI,CAACZ,QAAQ,CAACa,IAAI,CAAC,qBAAqB,EAAE,QAAQ,EAAE;QAAEC,QAAQ,EAAE;MAAI,CAAE,CAAC;MACvE;;IAGF,MAAMC,KAAK,GAAG,IAAI,CAACX,SAAS,CAACY,KAAK;IAElC;IACA,IAAI,CAACD,KAAK,CAACL,YAAY,EAAE;MACvB,IAAI,CAACV,QAAQ,CAACa,IAAI,CAAC,qCAAqC,EAAE,QAAQ,EAAE;QAAEC,QAAQ,EAAE;MAAI,CAAE,CAAC;MACvF;;IAGF,IAAI,CAACf,YAAY,CAACkB,WAAW,CAACF,KAAK,CAAC,CACjCG,SAAS,CACR,MAAK;MACH,IAAI,CAAClB,QAAQ,CAACa,IAAI,CAAC,0BAA0B,EAAE,QAAQ,EAAE;QAAEC,QAAQ,EAAE;MAAI,CAAE,CAAC;MAC5E,IAAI,CAACb,MAAM,CAACkB,QAAQ,CAAC,CAAC,yBAAyB,CAAC,CAAC;IACnD,CAAC,EACAC,KAAK,IAAI;MACR,IAAIA,KAAK,CAACA,KAAK,IAAIA,KAAK,CAACA,KAAK,CAACC,OAAO,EAAE;QACtC,IAAI,CAACrB,QAAQ,CAACa,IAAI,CAACO,KAAK,CAACA,KAAK,CAACC,OAAO,EAAE,QAAQ,EAAE;UAAEP,QAAQ,EAAE;QAAI,CAAE,CAAC;OACtE,MAAM;QACL,IAAI,CAACd,QAAQ,CAACa,IAAI,CAAC,sDAAsD,EAAE,QAAQ,EAAE;UAAEC,QAAQ,EAAE;QAAI,CAAE,CAAC;;IAE5G,CAAC,CACF;EACL;EAAC;qBAnDUlB,qBAAqB;EAAA;EAAA;UAArBA,qBAAqB;IAAA0B;IAAAC;IAAAC;IAAAC;IAAAC;MAAA;QCVlCC,8BAAuB;QAEjBA,yCAAyB;QAAAA,iBAAK;QAE/BA,+BAAsD;QAAxBA;UAAA,OAAYC,cAAU;QAAA,EAAC;QAEtDD,8BAAwB;QACLA,qBAAK;QAAAA,iBAAQ;QAC9BA,2BAAuE;QACzEA,iBAAM;QACNA,8BAAwB;QACFA,8BAAQ;QAAAA,iBAAQ;QACpCA,4BAA6E;QAC/EA,iBAAM;QACNA,+BAAwB;QACHA,gCAAe;QAAAA,iBAAQ;QAC1CA,4BAA4E;QAC9EA,iBAAM;QACNA,+BAAwB;QACIA,+BAAc;QAAAA,iBAAQ;QAChDA,6BAAyF;QAE3FA,iBAAM;QACNA,mCAAyC;QAAAA,wBAAO;QAAAA,iBAAS;;;QAnBlDA,eAAuB;QAAvBA,yCAAuB","names":["Validators","AjouterAdminComponent","constructor","formBuilder","adminService","snackBar","router","ngOnInit","initForm","adminForm","group","nom","required","prenom","email","PasswordHash","onSubmit","invalid","open","duration","admin","value","createAdmin","subscribe","navigate","error","message","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["C:\\Users\\shehn\\Music\\Andex PFE\\FrontEnd\\src\\app\\Admin\\ajouter-admin\\ajouter-admin.component.ts","C:\\Users\\shehn\\Music\\Andex PFE\\FrontEnd\\src\\app\\Admin\\ajouter-admin\\ajouter-admin.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Router } from '@angular/router'; // Route n'est pas nécessaire ici\nimport { AdminService } from 'src/app/Services/AdminService';\n@Component({\n  selector: 'app-ajouter-admin',\n  templateUrl: './ajouter-admin.component.html',\n  styleUrls: ['./ajouter-admin.component.css']\n})\nexport class AjouterAdminComponent implements OnInit {\n  adminForm!: FormGroup;\n\n\n  constructor(private formBuilder: FormBuilder, \n              private adminService: AdminService,\n              private snackBar: MatSnackBar,\n              private router: Router) {}\n\n  ngOnInit(): void {\n                this.initForm();\n              }\n  initForm(): void {\n\n    this.adminForm = this.formBuilder.group({\n      nom: ['', Validators.required],\n      prenom: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      PasswordHash: ['', Validators.required]\n    });\n    \n  }\n\n  onSubmit(): void {\n    if (this.adminForm.invalid) {\n      this.snackBar.open('Formulaire invalide', 'Fermer', { duration: 3000 });\n      return;\n    }\n\n    const admin = this.adminForm.value;\n\n    // Vérifier si le champ de mot de passe est vide\n    if (!admin.PasswordHash) {\n      this.snackBar.open('Le champ de mot de passe est requis', 'Fermer', { duration: 3000 });\n      return;\n    }\n\n    this.adminService.createAdmin(admin)\n      .subscribe(\n        () => {\n          this.snackBar.open('Admin ajouté avec succès', 'Fermer', { duration: 3000 });\n          this.router.navigate(['/tableauBord/listeAdmin']);\n        },\n        (error) => {\n          if (error.error && error.error.message) {\n            this.snackBar.open(error.error.message, 'Fermer', { duration: 3000 });\n          } else {\n            this.snackBar.open('Une erreur est survenue lors de l\\'ajout de l\\'admin', 'Fermer', { duration: 3000 });\n          }\n        }\n      );\n  }\n}\n","<div class=\"container\">\n  \n  <h1>Ajouter un Administrateur</h1>\n  \n     <form [formGroup]=\"adminForm\" (ngSubmit)=\"onSubmit()\">\n    \n    <div class=\"form-group\">\n      <label for=\"nom\">Nom :</label>\n      <input type=\"text\" id=\"nom\" class=\"form-control\" formControlName=\"nom\">\n    </div>\n    <div class=\"form-group\">\n      <label for=\"prenom\">Prénom :</label>\n      <input type=\"text\" id=\"prenom\" class=\"form-control\" formControlName=\"prenom\">\n    </div>\n    <div class=\"form-group\">\n      <label for=\"email\">Adresse Email :</label>\n      <input type=\"email\" id=\"email\" class=\"form-control\" formControlName=\"email\">\n    </div>\n    <div class=\"form-group\">\n      <label for=\"PasswordHash\">Mot de passe :</label>\n      <input type=\"password\" id=\"password\" class=\"form-control\" formControlName=\"PasswordHash\">\n     \n    </div>\n    <button type=\"submit\" class=\"btnAjouter\">Ajouter</button>\n </form>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}