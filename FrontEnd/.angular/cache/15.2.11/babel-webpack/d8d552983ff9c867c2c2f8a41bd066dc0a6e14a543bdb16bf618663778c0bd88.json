{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class QuizService {\n  generateLinkAndSendEmail(id, quizId, email) {\n    throw new Error('Method not implemented.');\n  }\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:5159/api/Quiz';\n    this.tokenApiUrl = 'http://localhost:5159/Token'; // URL du contrôleur Token\n    this.lienQuizApiUrl = 'http://localhost:5159'; // URL du contrôleur LienQuiz\n    this.apiQcmQuestion = 'http://localhost:5159/api/QCMQuestion';\n    this.baseUrl = 'http://localhost:5159/api/candidats';\n  }\n  getQCMQuestionsByQuizId(quizId) {\n    return this.http.get(`http://localhost:5159/api/QCMQuestion?quizId=${quizId}`);\n  }\n  getQuizById(quizId) {\n    const url = `${this.apiUrl}/${quizId}`;\n    return this.http.get(url);\n  }\n  createQuiz(quiz) {\n    const url = `${this.apiUrl}/CreerQuiz`;\n    return this.http.post(url, quiz);\n  }\n  updateQuiz(quiz) {\n    const url = `${this.apiUrl}/${quiz.quizId}`;\n    return this.http.put(url, quiz);\n  }\n  deleteQuiz(quizId) {\n    const url = `${this.apiUrl}/${quizId}`;\n    return this.http.delete(url);\n  }\n  getAllQuizzes() {\n    return this.http.get(this.apiUrl);\n  }\n  getTotalQuizCount() {\n    const url = `${this.apiUrl}/Count`;\n    return this.http.get(url);\n  }\n  sendInvitation(email) {\n    const url = `${this.tokenApiUrl}/send?email=${email}`;\n    return this.http.post(url, {});\n  }\n  generateQuizLink(candidatId, quizId) {\n    const url = `${this.lienQuizApiUrl}/GenerateLink?candidatId=${candidatId}&quizId=${quizId}`;\n    return this.http.post(url, {});\n  }\n  validerLienQuiz(token) {\n    return this.http.get(`${this.lienQuizApiUrl}/valider/${token}`);\n  }\n  getQuizzesByCandidat(candidatId) {\n    return this.http.get(`${this.baseUrl}/${candidatId}/quizzes`);\n  }\n  static #_ = this.ɵfac = function QuizService_Factory(t) {\n    return new (t || QuizService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: QuizService,\n    factory: QuizService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":";;AAQA,OAAM,MAAOA,WAAW;EACtBC,wBAAwB,CAACC,EAAO,EAAEC,MAAc,EAAEC,KAAU;IAC1D,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;EAC5C;EAQAC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IANhB,WAAM,GAAG,gCAAgC;IACzC,gBAAW,GAAG,6BAA6B,CAAC,CAAC;IAC7C,mBAAc,GAAG,uBAAuB,CAAC,CAAC;IAC1C,mBAAc,GAAG,uCAAuC;IACxD,YAAO,GAAG,qCAAqC;EAEhB;EAEvCC,uBAAuB,CAACL,MAAc;IACpC,OAAO,IAAI,CAACI,IAAI,CAACE,GAAG,CAAgB,gDAAgDN,MAAM,EAAE,CAAC;EAC/F;EACAO,WAAW,CAACP,MAAc;IACxB,MAAMQ,GAAG,GAAG,GAAG,IAAI,CAACC,MAAM,IAAIT,MAAM,EAAE;IACtC,OAAO,IAAI,CAACI,IAAI,CAACE,GAAG,CAAOE,GAAG,CAAC;EACjC;EAEAE,UAAU,CAACC,IAAU;IACnB,MAAMH,GAAG,GAAG,GAAG,IAAI,CAACC,MAAM,YAAY;IACtC,OAAO,IAAI,CAACL,IAAI,CAACQ,IAAI,CAAOJ,GAAG,EAAEG,IAAI,CAAC;EACxC;EAEAE,UAAU,CAACF,IAAU;IACnB,MAAMH,GAAG,GAAG,GAAG,IAAI,CAACC,MAAM,IAAIE,IAAI,CAACX,MAAM,EAAE;IAC3C,OAAO,IAAI,CAACI,IAAI,CAACU,GAAG,CAAON,GAAG,EAAEG,IAAI,CAAC;EACvC;EAEAI,UAAU,CAACf,MAAc;IACvB,MAAMQ,GAAG,GAAG,GAAG,IAAI,CAACC,MAAM,IAAIT,MAAM,EAAE;IACtC,OAAO,IAAI,CAACI,IAAI,CAACY,MAAM,CAAMR,GAAG,CAAC;EACnC;EAEAS,aAAa;IACX,OAAO,IAAI,CAACb,IAAI,CAACE,GAAG,CAAS,IAAI,CAACG,MAAM,CAAC;EAC3C;EAEAS,iBAAiB;IACf,MAAMV,GAAG,GAAG,GAAG,IAAI,CAACC,MAAM,QAAQ;IAClC,OAAO,IAAI,CAACL,IAAI,CAACE,GAAG,CAASE,GAAG,CAAC;EACnC;EACAW,cAAc,CAAClB,KAAa;IAC1B,MAAMO,GAAG,GAAG,GAAG,IAAI,CAACY,WAAW,eAAenB,KAAK,EAAE;IACrD,OAAO,IAAI,CAACG,IAAI,CAACQ,IAAI,CAAMJ,GAAG,EAAE,EAAE,CAAC;EACrC;EAEAa,gBAAgB,CAACC,UAAkB,EAAEtB,MAAc;IACjD,MAAMQ,GAAG,GAAG,GAAG,IAAI,CAACe,cAAc,4BAA4BD,UAAU,WAAWtB,MAAM,EAAE;IAC3F,OAAO,IAAI,CAACI,IAAI,CAACQ,IAAI,CAACJ,GAAG,EAAE,EAAE,CAAC;EAChC;EACAgB,eAAe,CAACC,KAAa;IAC3B,OAAO,IAAI,CAACrB,IAAI,CAACE,GAAG,CAAM,GAAG,IAAI,CAACiB,cAAc,YAAYE,KAAK,EAAE,CAAC;EACtE;EACAC,oBAAoB,CAACJ,UAAkB;IACrC,OAAO,IAAI,CAAClB,IAAI,CAACE,GAAG,CAAS,GAAG,IAAI,CAACqB,OAAO,IAAIL,UAAU,UAAU,CAAC;EACvE;EAAC;qBA1DUzB,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAA+B,SAAX/B,WAAW;IAAAgC,YAFV;EAAM","names":["QuizService","generateLinkAndSendEmail","id","quizId","email","Error","constructor","http","getQCMQuestionsByQuizId","get","getQuizById","url","apiUrl","createQuiz","quiz","post","updateQuiz","put","deleteQuiz","delete","getAllQuizzes","getTotalQuizCount","sendInvitation","tokenApiUrl","generateQuizLink","candidatId","lienQuizApiUrl","validerLienQuiz","token","getQuizzesByCandidat","baseUrl","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\shehn\\Music\\Andex PFE\\FrontEnd\\src\\app\\Services\\QuizService.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { QCMQuestion, Quiz } from '../models/Quiz';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class QuizService {\r\n  generateLinkAndSendEmail(id: any, quizId: number, email: any) {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n  \r\n  private apiUrl = 'http://localhost:5159/api/Quiz'; \r\n  private tokenApiUrl = 'http://localhost:5159/Token'; // URL du contrôleur Token\r\n  private lienQuizApiUrl = 'http://localhost:5159'; // URL du contrôleur LienQuiz\r\n  private apiQcmQuestion = 'http://localhost:5159/api/QCMQuestion';\r\n  private baseUrl = 'http://localhost:5159/api/candidats';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getQCMQuestionsByQuizId(quizId: number): Observable<QCMQuestion[]> {\r\n    return this.http.get<QCMQuestion[]>(`http://localhost:5159/api/QCMQuestion?quizId=${quizId}`);\r\n  }\r\n  getQuizById(quizId: number): Observable<Quiz> {\r\n    const url = `${this.apiUrl}/${quizId}`;\r\n    return this.http.get<Quiz>(url);\r\n  }\r\n\r\n  createQuiz(quiz: Quiz): Observable<Quiz> {\r\n    const url = `${this.apiUrl}/CreerQuiz`;\r\n    return this.http.post<Quiz>(url, quiz);\r\n  }\r\n  \r\n  updateQuiz(quiz: Quiz): Observable<Quiz> {\r\n    const url = `${this.apiUrl}/${quiz.quizId}`;\r\n    return this.http.put<Quiz>(url, quiz);\r\n  }\r\n\r\n  deleteQuiz(quizId: number): Observable<any> {\r\n    const url = `${this.apiUrl}/${quizId}`;\r\n    return this.http.delete<any>(url);\r\n  }\r\n\r\n  getAllQuizzes(): Observable<Quiz[]> {\r\n    return this.http.get<Quiz[]>(this.apiUrl);\r\n  }\r\n\r\n  getTotalQuizCount(): Observable<number> {\r\n    const url = `${this.apiUrl}/Count`;\r\n    return this.http.get<number>(url);\r\n  }\r\n  sendInvitation(email: string): Observable<any> {\r\n    const url = `${this.tokenApiUrl}/send?email=${email}`;\r\n    return this.http.post<any>(url, {});\r\n  }\r\n\r\n  generateQuizLink(candidatId: number, quizId: number): Observable<any> {\r\n    const url = `${this.lienQuizApiUrl}/GenerateLink?candidatId=${candidatId}&quizId=${quizId}`;\r\n    return this.http.post(url, {});\r\n  }\r\n  validerLienQuiz(token: string): Observable<any> {\r\n    return this.http.get<any>(`${this.lienQuizApiUrl}/valider/${token}`);\r\n  }\r\n  getQuizzesByCandidat(candidatId: number): Observable<Quiz[]> {\r\n    return this.http.get<Quiz[]>(`${this.baseUrl}/${candidatId}/quizzes`);\r\n  }\r\n  \r\n  \r\n  \r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}