{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AdminService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:5159/api/Utilisateur'; // URL de base de votre API\n  }\n  // Récupère la liste des admins depuis l'API\n  getAdmins() {\n    return this.http.get(`${this.apiUrl}/utilisateurs`);\n  }\n  // Récupère un admin spécifique par son ID\n  getAdminById(id) {\n    return this.http.get(`${this.apiUrl}/utilisateur/${id}`);\n  }\n  // Crée un nouvel admin en utilisant l'API\n  createAdmin(admin) {\n    return this.http.post(`${this.apiUrl}`, admin);\n  }\n  // Met à jour un admin existant\n  updateAdmin(id, admin) {\n    return this.http.put(`${this.apiUrl}/utilisateur/${id}`, admin);\n  }\n  changePassword(userId, oldPassword, newPassword) {\n    const payload = {\n      userId,\n      oldPassword,\n      newPassword\n    };\n    return this.http.post(`${this.apiUrl}/change-password`, payload);\n  }\n  // Supprime un admin par son ID\n  deleteAdmin(id) {\n    return this.http.delete(`${this.apiUrl}/utilisateur/${id}`);\n  }\n  static #_ = this.ɵfac = function AdminService_Factory(t) {\n    return new (t || AdminService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AdminService,\n    factory: AdminService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":";;AAQA,OAAM,MAAOA,YAAY;EAGvBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,WAAM,GAAG,uCAAuC,CAAC,CAAC;EAElB;EAExC;EACAC,SAAS;IACP,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAU,GAAG,IAAI,CAACC,MAAM,eAAe,CAAC;EAC9D;EAEA;EACAC,YAAY,CAACC,EAAU;IACrB,OAAO,IAAI,CAACL,IAAI,CAACE,GAAG,CAAQ,GAAG,IAAI,CAACC,MAAM,gBAAgBE,EAAE,EAAE,CAAC;EACjE;EAEA;EACAC,WAAW,CAACC,KAAY;IACtB,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAM,GAAG,IAAI,CAACL,MAAM,EAAE,EAAEI,KAAK,CAAC;EACrD;EAEA;EACAE,WAAW,CAACJ,EAAU,EAAEE,KAAY;IAClC,OAAO,IAAI,CAACP,IAAI,CAACU,GAAG,CAAM,GAAG,IAAI,CAACP,MAAM,gBAAgBE,EAAE,EAAE,EAAEE,KAAK,CAAC;EACtE;EAEAI,cAAc,CAACC,MAAc,EAAEC,WAAmB,EAAEC,WAAmB;IACrE,MAAMC,OAAO,GAAG;MAAEH,MAAM;MAAEC,WAAW;MAAEC;IAAW,CAAE;IACpD,OAAO,IAAI,CAACd,IAAI,CAACQ,IAAI,CAAM,GAAG,IAAI,CAACL,MAAM,kBAAkB,EAAEY,OAAO,CAAC;EACvE;EAEA;EACAC,WAAW,CAACX,EAAU;IACpB,OAAO,IAAI,CAACL,IAAI,CAACiB,MAAM,CAAM,GAAG,IAAI,CAACd,MAAM,gBAAgBE,EAAE,EAAE,CAAC;EAClE;EAAC;qBAjCUP,YAAY;EAAA;EAAA;WAAZA,YAAY;IAAAoB,SAAZpB,YAAY;IAAAqB,YAFX;EAAM","names":["AdminService","constructor","http","getAdmins","get","apiUrl","getAdminById","id","createAdmin","admin","post","updateAdmin","put","changePassword","userId","oldPassword","newPassword","payload","deleteAdmin","delete","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\shehn\\Music\\Andex PFE\\FrontEnd\\src\\app\\Services\\AdminService.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { admin } from '../models/admin'; \r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AdminService {\r\n  private apiUrl = 'http://localhost:5159/api/Utilisateur'; // URL de base de votre API\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  // Récupère la liste des admins depuis l'API\r\n  getAdmins(): Observable<admin[]> {\r\n    return this.http.get<admin[]>(`${this.apiUrl}/utilisateurs`);\r\n  }\r\n\r\n  // Récupère un admin spécifique par son ID\r\n  getAdminById(id: number): Observable<admin> {\r\n    return this.http.get<admin>(`${this.apiUrl}/utilisateur/${id}`);\r\n  }\r\n\r\n  // Crée un nouvel admin en utilisant l'API\r\n  createAdmin(admin: admin): Observable<any> {\r\n    return this.http.post<any>(`${this.apiUrl}`, admin);\r\n  }\r\n\r\n  // Met à jour un admin existant\r\n  updateAdmin(id: number, admin: admin): Observable<admin> {\r\n    return this.http.put<any>(`${this.apiUrl}/utilisateur/${id}`, admin);\r\n  }\r\n\r\n  changePassword(userId: number, oldPassword: string, newPassword: string): Observable<any> {\r\n    const payload = { userId, oldPassword, newPassword };\r\n    return this.http.post<any>(`${this.apiUrl}/change-password`, payload);\r\n  }\r\n\r\n  // Supprime un admin par son ID\r\n  deleteAdmin(id: number): Observable<any> {\r\n    return this.http.delete<any>(`${this.apiUrl}/utilisateur/${id}`);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}