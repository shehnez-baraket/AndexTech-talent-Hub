{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { COMMA, ENTER } from '@angular/cdk/keycodes';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/Services/QuestionService\";\nimport * as i3 from \"@angular/material/snack-bar\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"@angular/common\";\nfunction AjouterQuestionAdminComponent_option_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 21);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const niveau_r4 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", niveau_r4.value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(niveau_r4.label);\n  }\n}\nfunction AjouterQuestionAdminComponent_option_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 21);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const categorie_r5 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", categorie_r5);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(categorie_r5);\n  }\n}\nfunction AjouterQuestionAdminComponent_div_27_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 22)(1, \"span\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 23);\n    i0.ɵɵlistener(\"click\", function AjouterQuestionAdminComponent_div_27_Template_button_click_3_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r8);\n      const tag_r6 = restoredCtx.$implicit;\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.removeTag(tag_r6));\n    });\n    i0.ɵɵtext(4, \"X\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const tag_r6 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(tag_r6);\n  }\n}\nfunction AjouterQuestionAdminComponent_div_32_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 24);\n    i0.ɵɵelement(1, \"input\", 25)(2, \"input\", 26);\n    i0.ɵɵtext(3, \" Correct \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const i_r10 = ctx.index;\n    i0.ɵɵproperty(\"formGroupName\", i_r10);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate1(\"placeholder\", \"Option \", i_r10 + 1, \"\");\n  }\n}\nexport class AjouterQuestionAdminComponent {\n  constructor(formBuilder, questionService, snackBar, router) {\n    this.formBuilder = formBuilder;\n    this.questionService = questionService;\n    this.snackBar = snackBar;\n    this.router = router;\n    this.niveaux = [{\n      value: 0,\n      label: 'Débutant'\n    }, {\n      value: 1,\n      label: 'Intermédiaire'\n    }, {\n      value: 2,\n      label: 'Expert'\n    }];\n    this.categories = ['java', 'c#', '.net', '.net core', 'sql', 'algorithmique'];\n    this.selectedTags = [];\n    this.separatorKeysCodes = [ENTER, COMMA];\n  }\n  ngOnInit() {\n    this.initForm();\n  }\n  initForm() {\n    this.questionForm = this.formBuilder.group({\n      texte: ['', Validators.required],\n      niveau: ['', Validators.required],\n      domaine: ['', Validators.required],\n      options: this.formBuilder.array([], Validators.minLength(2))\n    });\n    // Ajouter les champs d'options à FormArray\n    for (let i = 0; i < 3; i++) {\n      this.addOption();\n    }\n  }\n  // Méthode pour ajouter un champ d'option\n  addOption() {\n    const optionsFormArray = this.questionForm.get('options');\n    optionsFormArray.push(this.formBuilder.group({\n      text: ['', Validators.required],\n      isCorrect: [false]\n    }));\n  }\n  addTagFromCategory(event) {\n    const target = event.target;\n    const category = target.value;\n    if (category && !this.selectedTags.includes(category)) {\n      this.selectedTags.push(category);\n    }\n  }\n  // Getter pour accéder à FormArray pour les options\n  get optionsFormArray() {\n    return this.questionForm.get('options');\n  }\n  addTag(event) {\n    const input = event.input;\n    const value = event.value;\n    // Ajouter le tag à la liste des tags sélectionnés\n    if ((value || '').trim() && !this.selectedTags.includes(value.trim())) {\n      this.selectedTags.push(value.trim());\n    }\n    // Réinitialiser l'input\n    if (input) {\n      input.value = '';\n    }\n  }\n  removeTag(tag) {\n    const index = this.selectedTags.indexOf(tag);\n    if (index >= 0) {\n      this.selectedTags.splice(index, 1);\n    }\n  }\n  onSubmit() {\n    console.log(this.questionForm);\n    if (this.questionForm.invalid) {\n      this.snackBar.open('Formulaire invalide', 'Fermer', {\n        duration: 3000\n      });\n      return;\n    }\n    // Récupérer la liste des tags\n    const tagsToSend = this.selectedTags;\n    const question = {\n      questionId: 0,\n      texte: this.questionForm.value.texte,\n      niveauId: this.questionForm.value.niveau,\n      domaine: this.selectedTags.join(', '),\n      point: this.questionForm.value.point,\n      option: this.questionForm.value.options.map(option => ({\n        optionId: 0,\n        questionId: 0,\n        texte: option.text,\n        estCorrect: option.isCorrect,\n        selected: false\n      }))\n    };\n    if (question.option.length < 2) {\n      this.snackBar.open('Vous devez ajouter au moins deux options.', 'Fermer', {\n        duration: 3000\n      });\n      return;\n    }\n    // Envoyer la question au service\n    this.questionService.addQuestion(question).subscribe(() => {\n      this.snackBar.open('Question ajoutée avec succès', 'Fermer', {\n        duration: 3000\n      });\n      this.router.navigate(['/tableauBord/listeQuestion']); // Rediriger vers la liste des questions après l'ajout\n    }, error => {\n      console.error(error);\n      this.snackBar.open('Une erreur est survenue lors de l\\'ajout de la question', 'Fermer', {\n        duration: 3000\n      });\n    });\n  }\n  static #_ = this.ɵfac = function AjouterQuestionAdminComponent_Factory(t) {\n    return new (t || AjouterQuestionAdminComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.QuestionService), i0.ɵɵdirectiveInject(i3.MatSnackBar), i0.ɵɵdirectiveInject(i4.Router));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AjouterQuestionAdminComponent,\n    selectors: [[\"app-ajouter-question-admin\"]],\n    decls: 37,\n    vars: 5,\n    consts: [[1, \"container\"], [3, \"formGroup\", \"submit\"], [1, \"form-group\"], [\"for\", \"texte\"], [\"type\", \"text\", \"id\", \"texte\", \"formControlName\", \"texte\", 1, \"form-control\"], [\"for\", \"niveau\"], [\"id\", \"niveau\", \"formControlName\", \"niveau\", 1, \"form-control\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"for\", \"point\"], [\"type\", \"number\", \"id\", \"point\", \"formControlName\", \"point\", 1, \"form-control\"], [\"for\", \"domaine\"], [\"id\", \"domaine\", \"formControlName\", \"domaine\", 1, \"form-control\", 3, \"change\"], [\"value\", \"\"], [\"for\", \"tags\"], [1, \"tags-container\"], [\"class\", \"tag\", 4, \"ngFor\", \"ngForOf\"], [\"for\", \"options\"], [\"formArrayName\", \"options\"], [\"class\", \"option-group\", 3, \"formGroupName\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", 3, \"click\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"], [3, \"value\"], [1, \"tag\"], [\"type\", \"button\", 1, \"remove-tag\", 3, \"click\"], [1, \"option-group\", 3, \"formGroupName\"], [\"type\", \"text\", \"formControlName\", \"text\", 1, \"form-control\", 3, \"placeholder\"], [\"type\", \"checkbox\", \"formControlName\", \"isCorrect\"]],\n    template: function AjouterQuestionAdminComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h1\");\n        i0.ɵɵtext(2, \"Ajouter Question\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"form\", 1);\n        i0.ɵɵlistener(\"submit\", function AjouterQuestionAdminComponent_Template_form_submit_3_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(4, \"div\", 2)(5, \"label\", 3);\n        i0.ɵɵtext(6, \"Texte de la question :\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(7, \"input\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"div\", 2)(9, \"label\", 5);\n        i0.ɵɵtext(10, \"Niveau :\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"select\", 6);\n        i0.ɵɵtemplate(12, AjouterQuestionAdminComponent_option_12_Template, 2, 2, \"option\", 7);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(13, \"div\", 2)(14, \"label\", 8);\n        i0.ɵɵtext(15, \"Points :\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(16, \"input\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"div\", 2)(18, \"label\", 10);\n        i0.ɵɵtext(19, \"Cat\\u00E9gorie :\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"select\", 11);\n        i0.ɵɵlistener(\"change\", function AjouterQuestionAdminComponent_Template_select_change_20_listener($event) {\n          return ctx.addTagFromCategory($event);\n        });\n        i0.ɵɵelementStart(21, \"option\", 12);\n        i0.ɵɵtext(22, \"S\\u00E9lectionner une cat\\u00E9gorie\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(23, AjouterQuestionAdminComponent_option_23_Template, 2, 2, \"option\", 7);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(24, \"div\", 2);\n        i0.ɵɵelement(25, \"label\", 13);\n        i0.ɵɵelementStart(26, \"div\", 14);\n        i0.ɵɵtemplate(27, AjouterQuestionAdminComponent_div_27_Template, 5, 1, \"div\", 15);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(28, \"div\", 2)(29, \"label\", 16);\n        i0.ɵɵtext(30, \"Options :\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(31, \"div\", 17);\n        i0.ɵɵtemplate(32, AjouterQuestionAdminComponent_div_32_Template, 4, 2, \"div\", 18);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(33, \"button\", 19);\n        i0.ɵɵlistener(\"click\", function AjouterQuestionAdminComponent_Template_button_click_33_listener() {\n          return ctx.addOption();\n        });\n        i0.ɵɵtext(34, \"+\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(35, \"button\", 20);\n        i0.ɵɵtext(36, \"Ajouter\");\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formGroup\", ctx.questionForm);\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"ngForOf\", ctx.niveaux);\n        i0.ɵɵadvance(11);\n        i0.ɵɵproperty(\"ngForOf\", ctx.categories);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngForOf\", ctx.selectedTags);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngForOf\", ctx.optionsFormArray.controls);\n      }\n    },\n    dependencies: [i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.CheckboxControlValueAccessor, i1.SelectControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i5.NgForOf, i1.FormGroupDirective, i1.FormControlName, i1.FormGroupName, i1.FormArrayName],\n    styles: [\".container[_ngcontent-%COMP%] {\\r\\n  max-width: 60%;\\r\\n  margin: 20px auto;\\r\\n  padding: 20px;\\r\\n  background-color: #fff;\\r\\n  border-radius: 10px;\\r\\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\\r\\n  display: flex; \\r\\n  justify-content: center; \\r\\n  align-items: center; \\r\\n  flex-direction: column; \\r\\n}\\r\\n.tag[_ngcontent-%COMP%] {\\r\\n  display: inline-block;\\r\\n  margin-right: 5px;\\r\\n}\\r\\n\\r\\n.remove-tag[_ngcontent-%COMP%] {\\r\\n  font-size: 12px; \\r\\n  padding: 0 5px; \\r\\n}\\r\\n\\r\\n.form-group[_ngcontent-%COMP%] {\\r\\n  margin-bottom: 20px;\\r\\n}\\r\\n\\r\\nlabel[_ngcontent-%COMP%] {\\r\\n  font-weight: bold;\\r\\n}\\r\\n\\r\\ninput[type=\\\"text\\\"][_ngcontent-%COMP%], select[_ngcontent-%COMP%], input[type=\\\"email\\\"][_ngcontent-%COMP%], input[type=\\\"number\\\"][_ngcontent-%COMP%] {\\r\\n  width: 100%;\\r\\n  padding: 10px;\\r\\n  border: 1px solid #ccc;\\r\\n  border-radius: 4px;\\r\\n  box-sizing: border-box; \\r\\n\\r\\n}\\r\\n\\r\\nbutton[_ngcontent-%COMP%] {\\r\\n  padding: 10px 20px;\\r\\n  cursor: pointer;\\r\\n  border: none;\\r\\n  background-color: #2c216e; \\r\\n  color: white;\\r\\n  border-radius: 5px; \\r\\n}\\r\\n\\r\\n.btnAjouter[_ngcontent-%COMP%] {\\r\\n  margin-top: 20px; \\r\\n  width: 100%; \\r\\n}\\r\\n.options-container[_ngcontent-%COMP%] {\\r\\n  margin-top: 20px;\\r\\n  width: 100%;\\r\\n}\\r\\n\\r\\n.options-container[_ngcontent-%COMP%]   input[type=\\\"text\\\"][_ngcontent-%COMP%] {\\r\\n  margin-bottom: 10px;\\r\\n}\\r\\n.option-group[_ngcontent-%COMP%] {\\r\\n  display: flex;\\r\\n  align-items: center;\\r\\n  margin-bottom: 10px;\\r\\n}\\r\\n\\r\\n.option-group[_ngcontent-%COMP%]   input[type=\\\"text\\\"][_ngcontent-%COMP%] {\\r\\n  flex: 1;\\r\\n  margin-right: 10px;\\r\\n}\\r\\n\\r\\n.option-group[_ngcontent-%COMP%]   input[type=\\\"checkbox\\\"][_ngcontent-%COMP%] {\\r\\n  margin-left: 10px;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvUXVlc3Rpb25zL2Fqb3V0ZXItcXVlc3Rpb24tYWRtaW4vYWpvdXRlci1xdWVzdGlvbi1hZG1pbi5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsY0FBYztFQUNkLGlCQUFpQjtFQUNqQixhQUFhO0VBQ2Isc0JBQXNCO0VBQ3RCLG1CQUFtQjtFQUNuQix1Q0FBdUM7RUFDdkMsYUFBYSxFQUFFLHFCQUFxQjtFQUNwQyx1QkFBdUIsRUFBRSw0QkFBNEI7RUFDckQsbUJBQW1CLEVBQUUsMEJBQTBCO0VBQy9DLHNCQUFzQixFQUFFLG9DQUFvQztBQUM5RDtBQUNBO0VBQ0UscUJBQXFCO0VBQ3JCLGlCQUFpQjtBQUNuQjs7QUFFQTtFQUNFLGVBQWUsRUFBRSxrQ0FBa0M7RUFDbkQsY0FBYyxFQUFFLHFEQUFxRDtBQUN2RTs7QUFFQTtFQUNFLG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLGlCQUFpQjtBQUNuQjs7QUFFQTs7OztFQUlFLFdBQVc7RUFDWCxhQUFhO0VBQ2Isc0JBQXNCO0VBQ3RCLGtCQUFrQjtFQUNsQixzQkFBc0IsRUFBRSw0REFBNEQ7O0FBRXRGOztBQUVBO0VBQ0Usa0JBQWtCO0VBQ2xCLGVBQWU7RUFDZixZQUFZO0VBQ1oseUJBQXlCLEVBQUUsa0JBQWtCO0VBQzdDLFlBQVk7RUFDWixrQkFBa0IsRUFBRSxvQ0FBb0M7QUFDMUQ7O0FBRUE7RUFDRSxnQkFBZ0IsRUFBRSwwQ0FBMEM7RUFDNUQsV0FBVyxFQUFFLHFCQUFxQjtBQUNwQztBQUNBO0VBQ0UsZ0JBQWdCO0VBQ2hCLFdBQVc7QUFDYjs7QUFFQTtFQUNFLG1CQUFtQjtBQUNyQjtBQUNBO0VBQ0UsYUFBYTtFQUNiLG1CQUFtQjtFQUNuQixtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxPQUFPO0VBQ1Asa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0UsaUJBQWlCO0FBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiLmNvbnRhaW5lciB7XHJcbiAgbWF4LXdpZHRoOiA2MCU7XHJcbiAgbWFyZ2luOiAyMHB4IGF1dG87XHJcbiAgcGFkZGluZzogMjBweDtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xyXG4gIGJvcmRlci1yYWRpdXM6IDEwcHg7XHJcbiAgYm94LXNoYWRvdzogMCAwIDEwcHggcmdiYSgwLCAwLCAwLCAwLjMpO1xyXG4gIGRpc3BsYXk6IGZsZXg7IC8qIFV0aWxpc2VyIEZsZXhib3ggKi9cclxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsgLyogQ2VudHJlciBob3Jpem9udGFsZW1lbnQgKi9cclxuICBhbGlnbi1pdGVtczogY2VudGVyOyAvKiBDZW50cmVyIHZlcnRpY2FsZW1lbnQgKi9cclxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOyAvKiBBbGlnbmVyIGxlcyDDg8KpbMODwqltZW50cyBlbiBjb2xvbm5lICovXHJcbn1cclxuLnRhZyB7XHJcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gIG1hcmdpbi1yaWdodDogNXB4O1xyXG59XHJcblxyXG4ucmVtb3ZlLXRhZyB7XHJcbiAgZm9udC1zaXplOiAxMnB4OyAvKiBSZWTDg8KpZmluaXIgbGEgdGFpbGxlIGR1IGJvdXRvbiAqL1xyXG4gIHBhZGRpbmc6IDAgNXB4OyAvKiBBam91dGVyIHVuIHBldSBkJ2VzcGFjZSBpbnTDg8KpcmlldXIgcG91ciBsZSBib3V0b24gKi9cclxufVxyXG5cclxuLmZvcm0tZ3JvdXAge1xyXG4gIG1hcmdpbi1ib3R0b206IDIwcHg7XHJcbn1cclxuXHJcbmxhYmVsIHtcclxuICBmb250LXdlaWdodDogYm9sZDtcclxufVxyXG5cclxuaW5wdXRbdHlwZT1cInRleHRcIl0sXHJcbnNlbGVjdCxcclxuaW5wdXRbdHlwZT1cImVtYWlsXCJdLFxyXG5pbnB1dFt0eXBlPVwibnVtYmVyXCJdIHtcclxuICB3aWR0aDogMTAwJTtcclxuICBwYWRkaW5nOiAxMHB4O1xyXG4gIGJvcmRlcjogMXB4IHNvbGlkICNjY2M7XHJcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xyXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7IC8qIEluY2x1cmUgbGUgcGFkZGluZyBldCBsYSBib3JkdXJlIGRhbnMgbGEgbGFyZ2V1ciB0b3RhbGUgKi9cclxuXHJcbn1cclxuXHJcbmJ1dHRvbiB7XHJcbiAgcGFkZGluZzogMTBweCAyMHB4O1xyXG4gIGN1cnNvcjogcG9pbnRlcjtcclxuICBib3JkZXI6IG5vbmU7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogIzJjMjE2ZTsgLyogQ291bGV1ciBibGV1ZSAqL1xyXG4gIGNvbG9yOiB3aGl0ZTtcclxuICBib3JkZXItcmFkaXVzOiA1cHg7IC8qIENvaW5zIGFycm9uZGlzIHBvdXIgbGVzIGJvdXRvbnMgKi9cclxufVxyXG5cclxuLmJ0bkFqb3V0ZXIge1xyXG4gIG1hcmdpbi10b3A6IDIwcHg7IC8qIEFqb3V0IGQndW5lIG1hcmdlIGF1LWRlc3N1cyBkdSBib3V0b24gKi9cclxuICB3aWR0aDogMTAwJTsgLyogTGFyZ2V1ciBtYXhpbWFsZSAqL1xyXG59XHJcbi5vcHRpb25zLWNvbnRhaW5lciB7XHJcbiAgbWFyZ2luLXRvcDogMjBweDtcclxuICB3aWR0aDogMTAwJTtcclxufVxyXG5cclxuLm9wdGlvbnMtY29udGFpbmVyIGlucHV0W3R5cGU9XCJ0ZXh0XCJdIHtcclxuICBtYXJnaW4tYm90dG9tOiAxMHB4O1xyXG59XHJcbi5vcHRpb24tZ3JvdXAge1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICBtYXJnaW4tYm90dG9tOiAxMHB4O1xyXG59XHJcblxyXG4ub3B0aW9uLWdyb3VwIGlucHV0W3R5cGU9XCJ0ZXh0XCJdIHtcclxuICBmbGV4OiAxO1xyXG4gIG1hcmdpbi1yaWdodDogMTBweDtcclxufVxyXG5cclxuLm9wdGlvbi1ncm91cCBpbnB1dFt0eXBlPVwiY2hlY2tib3hcIl0ge1xyXG4gIG1hcmdpbi1sZWZ0OiAxMHB4O1xyXG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["Validators","COMMA","ENTER","i0","AjouterQuestionAdminComponent","constructor","formBuilder","questionService","snackBar","router","value","label","ngOnInit","initForm","questionForm","group","texte","required","niveau","domaine","options","array","minLength","i","addOption","optionsFormArray","get","push","text","isCorrect","addTagFromCategory","event","target","category","selectedTags","includes","addTag","input","trim","removeTag","tag","index","indexOf","splice","onSubmit","console","log","invalid","open","duration","tagsToSend","question","questionId","niveauId","join","point","option","map","optionId","estCorrect","selected","length","addQuestion","subscribe","navigate","error","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\shehn\\Music\\Andex PFE\\FrontEnd\\src\\app\\Questions\\ajouter-question-admin\\ajouter-question-admin.component.ts","C:\\Users\\shehn\\Music\\Andex PFE\\FrontEnd\\src\\app\\Questions\\ajouter-question-admin\\ajouter-question-admin.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Router } from '@angular/router';\nimport { COMMA, ENTER } from '@angular/cdk/keycodes';\nimport { MatChipInputEvent } from '@angular/material/chips';\nimport { QuestionService } from 'src/app/Services/QuestionService';\nimport { Question } from 'src/app/models/Question';\n\n\n@Component({\n  selector: 'app-ajouter-question-admin',\n  templateUrl: './ajouter-question-admin.component.html',\n  styleUrls: ['./ajouter-question-admin.component.css']\n})\nexport class AjouterQuestionAdminComponent implements OnInit {\n  questionForm!: FormGroup;\n  niveaux = [\n    { value: 0, label: 'Débutant' },\n    { value: 1, label: 'Intermédiaire' },\n    { value: 2, label: 'Expert' }\n  ];\n  categories = ['java', 'c#', '.net', '.net core', 'sql', 'algorithmique'];\n  selectedTags: string[] = [];\n  readonly separatorKeysCodes: number[] = [ENTER, COMMA];\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private questionService: QuestionService,\n    private snackBar: MatSnackBar,\n    private router: Router\n  ) {}\n\n  ngOnInit(): void {\n    this.initForm();\n  }\n\n  initForm(): void {\n    this.questionForm = this.formBuilder.group({\n      texte: ['', Validators.required],\n      niveau: ['', Validators.required],\n      domaine: ['', Validators.required],\n      options: this.formBuilder.array([], Validators.minLength(2))\n    });\n\n    // Ajouter les champs d'options à FormArray\n    for (let i = 0; i < 3; i++) {\n      this.addOption();\n    }\n  }\n\n  // Méthode pour ajouter un champ d'option\n  addOption(): void {\n    const optionsFormArray = this.questionForm.get('options') as FormArray;\n    optionsFormArray.push(this.formBuilder.group({\n      text: ['', Validators.required],\n      isCorrect: [false]\n    }));\n  }\n  addTagFromCategory(event: Event): void {\n    const target = event.target as HTMLSelectElement;\n    const category = target.value;\n    if (category && !this.selectedTags.includes(category)) {\n      this.selectedTags.push(category);\n    }\n  }\n\n  // Getter pour accéder à FormArray pour les options\n  get optionsFormArray(): FormArray {\n    return this.questionForm.get('options') as FormArray;\n  }\n\n  addTag(event: any): void {\n    const input = event.input;\n    const value = event.value;\n\n    // Ajouter le tag à la liste des tags sélectionnés\n    if ((value || '').trim() && !this.selectedTags.includes(value.trim())) {\n      this.selectedTags.push(value.trim());\n    }\n\n    // Réinitialiser l'input\n    if (input) {\n      input.value = '';\n    }\n  }\n\n  removeTag(tag: string): void {\n    const index = this.selectedTags.indexOf(tag);\n\n    if (index >= 0) {\n      this.selectedTags.splice(index, 1);\n    }\n  }\n\n  onSubmit(): void {\n    console.log(this.questionForm);\n    if (this.questionForm.invalid) {\n      this.snackBar.open('Formulaire invalide', 'Fermer', { duration: 3000 });\n      return;\n    }\n\n    // Récupérer la liste des tags\n    const tagsToSend = this.selectedTags;\n\n    const question: Question = {\n      questionId: 0,\n      texte: this.questionForm.value.texte,\n      niveauId: this.questionForm.value.niveau,\n      domaine: this.selectedTags.join(', '),\n      point: this.questionForm.value.point,\n      option: this.questionForm.value.options.map((option: any) => ({\n        optionId: 0,\n        questionId: 0,\n        texte: option.text,\n        estCorrect: option.isCorrect,\n        selected: false\n      }))\n    };\n\n    if (question.option.length < 2) {\n      this.snackBar.open('Vous devez ajouter au moins deux options.', 'Fermer', { duration: 3000 });\n      return;\n    }\n\n   \n\n    // Envoyer la question au service\n    this.questionService.addQuestion(question).subscribe(\n      () => {\n        this.snackBar.open('Question ajoutée avec succès', 'Fermer', { duration: 3000 });\n        this.router.navigate(['/tableauBord/listeQuestion']); // Rediriger vers la liste des questions après l'ajout\n      },\n      (error) => {\n        console.error(error);\n        this.snackBar.open('Une erreur est survenue lors de l\\'ajout de la question', 'Fermer', { duration: 3000 });\n      }\n    );\n  }\n}\n","<div class=\"container\">\n  <h1>Ajouter Question</h1>\n  <form [formGroup]=\"questionForm\" (submit)=\"onSubmit()\">\n    <div class=\"form-group\">\n      <label for=\"texte\">Texte de la question :</label>\n      <input type=\"text\" id=\"texte\" class=\"form-control\" formControlName=\"texte\">\n    </div>\n    <div class=\"form-group\">\n      <label for=\"niveau\">Niveau :</label>\n      <select id=\"niveau\" class=\"form-control\" formControlName=\"niveau\">\n        <option *ngFor=\"let niveau of niveaux\" [value]=\"niveau.value\">{{ niveau.label }}</option>\n      </select>\n    </div>\n    <div class=\"form-group\">\n      <label for=\"point\">Points :</label>\n      <input type=\"number\" id=\"point\" class=\"form-control\" formControlName=\"point\">\n    </div>\n    <div class=\"form-group\">\n      <label for=\"domaine\">Catégorie :</label>\n      <select id=\"domaine\" class=\"form-control\" formControlName=\"domaine\" (change)=\"addTagFromCategory($event)\">\n        <option value=\"\">Sélectionner une catégorie</option>\n        <option *ngFor=\"let categorie of categories\" [value]=\"categorie\">{{ categorie }}</option>\n      </select>\n    </div>\n  \n    <div class=\"form-group\">\n      <label for=\"tags\"></label>\n      <div class=\"tags-container\">\n        <div *ngFor=\"let tag of selectedTags\" class=\"tag\">\n          <span>{{ tag }}</span>\n          <button type=\"button\" class=\"remove-tag\" (click)=\"removeTag(tag)\">X</button>\n        </div>\n      </div>\n    </div>\n    <div class=\"form-group\">\n      <label for=\"options\">Options :</label>\n      <div formArrayName=\"options\">\n        <div *ngFor=\"let option of optionsFormArray.controls; let i = index\" [formGroupName]=\"i\" class=\"option-group\">\n          <input type=\"text\" class=\"form-control\" formControlName=\"text\" placeholder=\"Option {{ i + 1 }}\">\n          <input type=\"checkbox\" formControlName=\"isCorrect\"> Correct\n        </div>\n      </div>\n      <button type=\"button\" class=\"btn btn-secondary\" (click)=\"addOption()\">+</button>\n    </div>\n    <button type=\"submit\" class=\"btn btn-primary\">Ajouter</button>\n  </form>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}