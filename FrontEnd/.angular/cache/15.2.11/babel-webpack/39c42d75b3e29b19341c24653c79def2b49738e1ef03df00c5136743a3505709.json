{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class QuestionnaireService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:5159/api/Questionnaires';\n  }\n  // Récupérer tous les questionnaires\n  getQuestionnaires() {\n    return this.http.get(this.apiUrl);\n  }\n  // Récupérer un questionnaire par son ID\n  getQuestionnaire(id) {\n    const url = `${this.apiUrl}/${id}`;\n    return this.http.get(url);\n  }\n  // Créer un nouveau questionnaire\n  createQuestionnaire(questionnaire) {\n    return this.http.post(this.apiUrl, questionnaire);\n  }\n  // Mettre à jour un questionnaire existant\n  updateQuestionnaire(id, questionnaire) {\n    const url = `${this.apiUrl}/${id}`;\n    return this.http.put(url, questionnaire);\n  }\n  // Supprimer un questionnaire par son ID\n  deleteQuestionnaire(id) {\n    const url = `${this.apiUrl}/${id}`;\n    return this.http.delete(url);\n  }\n  getTotalQuestionnaireCount() {\n    return this.http.get(`${this.apiUrl}/Count`);\n  }\n  static #_ = this.ɵfac = function QuestionnaireService_Factory(t) {\n    return new (t || QuestionnaireService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: QuestionnaireService,\n    factory: QuestionnaireService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":";;AAQA,OAAM,MAAOA,oBAAoB;EAG/BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,WAAM,GAAG,0CAA0C;EAEnB;EAExC;EACAC,iBAAiB;IACf,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAkB,IAAI,CAACC,MAAM,CAAC;EACpD;EAEA;EACAC,gBAAgB,CAACC,EAAU;IACzB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACH,MAAM,IAAIE,EAAE,EAAE;IAClC,OAAO,IAAI,CAACL,IAAI,CAACE,GAAG,CAAgBI,GAAG,CAAC;EAC1C;EAEA;EACAC,mBAAmB,CAACC,aAA4B;IAC9C,OAAO,IAAI,CAACR,IAAI,CAACS,IAAI,CAAgB,IAAI,CAACN,MAAM,EAAEK,aAAa,CAAC;EAClE;EAEA;EACAE,mBAAmB,CAACL,EAAU,EAAEG,aAA4B;IAC1D,MAAMF,GAAG,GAAG,GAAG,IAAI,CAACH,MAAM,IAAIE,EAAE,EAAE;IAClC,OAAO,IAAI,CAACL,IAAI,CAACW,GAAG,CAACL,GAAG,EAAEE,aAAa,CAAC;EAC1C;EAEA;EACAI,mBAAmB,CAACP,EAAU;IAC5B,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACH,MAAM,IAAIE,EAAE,EAAE;IAClC,OAAO,IAAI,CAACL,IAAI,CAACa,MAAM,CAACP,GAAG,CAAC;EAC9B;EACAQ,0BAA0B;IACxB,OAAO,IAAI,CAACd,IAAI,CAACE,GAAG,CAAS,GAAG,IAAI,CAACC,MAAM,QAAQ,CAAC;EACtD;EAAC;qBAlCUL,oBAAoB;EAAA;EAAA;WAApBA,oBAAoB;IAAAiB,SAApBjB,oBAAoB;IAAAkB,YAFnB;EAAM","names":["QuestionnaireService","constructor","http","getQuestionnaires","get","apiUrl","getQuestionnaire","id","url","createQuestionnaire","questionnaire","post","updateQuestionnaire","put","deleteQuestionnaire","delete","getTotalQuestionnaireCount","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\shehn\\Music\\Andex PFE\\FrontEnd\\src\\app\\Services\\Questionnaire.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Questionnaire } from '../models/Questionnaire'; \r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class QuestionnaireService {\r\n  private apiUrl = 'http://localhost:5159/api/Questionnaires';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  // Récupérer tous les questionnaires\r\n  getQuestionnaires(): Observable<Questionnaire[]> {\r\n    return this.http.get<Questionnaire[]>(this.apiUrl);\r\n  }\r\n\r\n  // Récupérer un questionnaire par son ID\r\n  getQuestionnaire(id: number): Observable<Questionnaire> {\r\n    const url = `${this.apiUrl}/${id}`;\r\n    return this.http.get<Questionnaire>(url);\r\n  }\r\n\r\n  // Créer un nouveau questionnaire\r\n  createQuestionnaire(questionnaire: Questionnaire): Observable<Questionnaire> {\r\n    return this.http.post<Questionnaire>(this.apiUrl, questionnaire);\r\n  }\r\n\r\n  // Mettre à jour un questionnaire existant\r\n  updateQuestionnaire(id: number, questionnaire: Questionnaire): Observable<any> {\r\n    const url = `${this.apiUrl}/${id}`;\r\n    return this.http.put(url, questionnaire);\r\n  }\r\n\r\n  // Supprimer un questionnaire par son ID\r\n  deleteQuestionnaire(id: number): Observable<any> {\r\n    const url = `${this.apiUrl}/${id}`;\r\n    return this.http.delete(url);\r\n  }\r\n  getTotalQuestionnaireCount(): Observable<number> {\r\n    return this.http.get<number>(`${this.apiUrl}/Count`);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}