{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../Services/CandidatService\";\nimport * as i3 from \"@angular/material/snack-bar\";\nimport * as i4 from \"@angular/router\";\nexport class ModifierCandidatComponent {\n  onAnnule() {\n    this.initForm();\n    this.route.params.subscribe(params => {\n      this.candidatId = +params['id'];\n      this.getCandidatById(this.candidatId);\n    });\n  }\n  constructor(formBuilder, candidatService, snackBar, router, route) {\n    this.formBuilder = formBuilder;\n    this.candidatService = candidatService;\n    this.snackBar = snackBar;\n    this.router = router;\n    this.route = route;\n  }\n  ngOnInit() {\n    this.initForm();\n    this.route.params.subscribe(params => {\n      this.candidatId = +params['id'];\n      this.getCandidatById(this.candidatId);\n    });\n  }\n  initForm() {\n    this.candidatForm = this.formBuilder.group({\n      nom: ['', Validators.required],\n      prenom: ['', Validators.required],\n      adresseEmail: ['', [Validators.required, Validators.email]]\n    });\n  }\n  getCandidatById(id) {\n    this.candidatService.getCandidatById(id).subscribe(candidat => {\n      this.candidatForm.patchValue({\n        nom: candidat.nom,\n        prenom: candidat.prenom,\n        adresseEmail: candidat.adresseEmail\n      });\n    });\n  }\n  onSubmit() {\n    if (this.candidatForm.invalid) {\n      return;\n    }\n    const candidat = this.candidatForm.getRawValue();\n    this.candidatService.modifierCandidat(this.candidatId, candidat).subscribe(() => {\n      this.snackBar.open('Candidat modifié avec succès', 'Fermer', {\n        duration: 3000\n      });\n      console.log(candidat);\n      this.router.navigate(['/tableauBord/listeCandidat']);\n    });\n  }\n  static #_ = this.ɵfac = function ModifierCandidatComponent_Factory(t) {\n    return new (t || ModifierCandidatComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.CandidatService), i0.ɵɵdirectiveInject(i3.MatSnackBar), i0.ɵɵdirectiveInject(i4.Router), i0.ɵɵdirectiveInject(i4.ActivatedRoute));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ModifierCandidatComponent,\n    selectors: [[\"app-modifier-candidat\"]],\n    decls: 20,\n    vars: 1,\n    consts: [[1, \"container\"], [3, \"formGroup\"], [1, \"form-group\"], [\"for\", \"nom\"], [\"type\", \"text\", \"id\", \"nom\", \"formControlName\", \"nom\", 1, \"form-control\"], [\"for\", \"prenom\"], [\"type\", \"text\", \"id\", \"prenom\", \"formControlName\", \"prenom\", 1, \"form-control\"], [\"for\", \"adresseEmail\"], [\"type\", \"email\", \"id\", \"adresseEmail\", \"formControlName\", \"adresseEmail\", 1, \"form-control\"], [1, \"btnModif\", 3, \"click\"]],\n    template: function ModifierCandidatComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h1\");\n        i0.ɵɵtext(2, \"Modifier Candidat\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"form\", 1)(4, \"div\", 2)(5, \"label\", 3);\n        i0.ɵɵtext(6, \"Nom :\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(7, \"input\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"div\", 2)(9, \"label\", 5);\n        i0.ɵɵtext(10, \"Pr\\u00E9nom :\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(11, \"input\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"div\", 2)(13, \"label\", 7);\n        i0.ɵɵtext(14, \"Adresse Email :\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(15, \"input\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"button\", 9);\n        i0.ɵɵlistener(\"click\", function ModifierCandidatComponent_Template_button_click_16_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵtext(17, \"Modifier\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"button\", 9);\n        i0.ɵɵlistener(\"click\", function ModifierCandidatComponent_Template_button_click_18_listener() {\n          return ctx.onAnnule();\n        });\n        i0.ɵɵtext(19, \"Annuler\");\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formGroup\", ctx.candidatForm);\n      }\n    },\n    dependencies: [i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n    styles: [\".container[_ngcontent-%COMP%] {\\r\\n  max-width: 60%;\\r\\n  margin: 20px auto;\\r\\n  padding: 20px;\\r\\n  background-color: #fff;\\r\\n  border-radius: 10px;\\r\\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\\r\\n  display: flex; \\r\\n  justify-content: center; \\r\\n  align-items: center; \\r\\n  flex-direction: column; \\r\\n}\\r\\n\\r\\n.form-group[_ngcontent-%COMP%] {\\r\\n  margin-bottom: 20px;\\r\\n}\\r\\n\\r\\nlabel[_ngcontent-%COMP%] {\\r\\n  font-weight: bold;\\r\\n}\\r\\n\\r\\ninput[type=\\\"text\\\"][_ngcontent-%COMP%], input[type=\\\"email\\\"][_ngcontent-%COMP%] {\\r\\n  width: 100%;\\r\\n  padding: 10px;\\r\\n  border: 1px solid #ccc;\\r\\n  border-radius: 4px;\\r\\n}\\r\\n\\r\\nbutton[_ngcontent-%COMP%] {\\r\\n  padding: 10px 20px;\\r\\n  cursor: pointer;\\r\\n  border: none;\\r\\n  background-color: #2c216e; \\r\\n  color: white;\\r\\n  border-radius: 5px; \\r\\n}\\r\\n\\r\\n.btnModif[_ngcontent-%COMP%] {\\r\\n  margin-top: 20px; \\r\\n  width: 100%; \\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvQ2FuZGlkYXQvbW9kaWZpZXItY2FuZGlkYXQvbW9kaWZpZXItY2FuZGlkYXQuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGNBQWM7RUFDZCxpQkFBaUI7RUFDakIsYUFBYTtFQUNiLHNCQUFzQjtFQUN0QixtQkFBbUI7RUFDbkIsdUNBQXVDO0VBQ3ZDLGFBQWEsRUFBRSxxQkFBcUI7RUFDcEMsdUJBQXVCLEVBQUUsNEJBQTRCO0VBQ3JELG1CQUFtQixFQUFFLDBCQUEwQjtFQUMvQyxzQkFBc0IsRUFBRSxvQ0FBb0M7QUFDOUQ7O0FBRUE7RUFDRSxtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxpQkFBaUI7QUFDbkI7O0FBRUE7O0VBRUUsV0FBVztFQUNYLGFBQWE7RUFDYixzQkFBc0I7RUFDdEIsa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0Usa0JBQWtCO0VBQ2xCLGVBQWU7RUFDZixZQUFZO0VBQ1oseUJBQXlCLEVBQUUsa0JBQWtCO0VBQzdDLFlBQVk7RUFDWixrQkFBa0IsRUFBRSxvQ0FBb0M7QUFDMUQ7O0FBRUE7RUFDRSxnQkFBZ0IsRUFBRSwwQ0FBMEM7RUFDNUQsV0FBVyxFQUFFLHFCQUFxQjtBQUNwQyIsInNvdXJjZXNDb250ZW50IjpbIi5jb250YWluZXIge1xyXG4gIG1heC13aWR0aDogNjAlO1xyXG4gIG1hcmdpbjogMjBweCBhdXRvO1xyXG4gIHBhZGRpbmc6IDIwcHg7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcclxuICBib3JkZXItcmFkaXVzOiAxMHB4O1xyXG4gIGJveC1zaGFkb3c6IDAgMCAxMHB4IHJnYmEoMCwgMCwgMCwgMC4zKTtcclxuICBkaXNwbGF5OiBmbGV4OyAvKiBVdGlsaXNlciBGbGV4Ym94ICovXHJcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7IC8qIENlbnRyZXIgaG9yaXpvbnRhbGVtZW50ICovXHJcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjsgLyogQ2VudHJlciB2ZXJ0aWNhbGVtZW50ICovXHJcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsgLyogQWxpZ25lciBsZXMgw4PCqWzDg8KpbWVudHMgZW4gY29sb25uZSAqL1xyXG59XHJcblxyXG4uZm9ybS1ncm91cCB7XHJcbiAgbWFyZ2luLWJvdHRvbTogMjBweDtcclxufVxyXG5cclxubGFiZWwge1xyXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG59XHJcblxyXG5pbnB1dFt0eXBlPVwidGV4dFwiXSxcclxuaW5wdXRbdHlwZT1cImVtYWlsXCJdIHtcclxuICB3aWR0aDogMTAwJTtcclxuICBwYWRkaW5nOiAxMHB4O1xyXG4gIGJvcmRlcjogMXB4IHNvbGlkICNjY2M7XHJcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xyXG59XHJcblxyXG5idXR0b24ge1xyXG4gIHBhZGRpbmc6IDEwcHggMjBweDtcclxuICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgYm9yZGVyOiBub25lO1xyXG4gIGJhY2tncm91bmQtY29sb3I6ICMyYzIxNmU7IC8qIENvdWxldXIgYmxldWUgKi9cclxuICBjb2xvcjogd2hpdGU7XHJcbiAgYm9yZGVyLXJhZGl1czogNXB4OyAvKiBDb2lucyBhcnJvbmRpcyBwb3VyIGxlcyBib3V0b25zICovXHJcbn1cclxuXHJcbi5idG5Nb2RpZiB7XHJcbiAgbWFyZ2luLXRvcDogMjBweDsgLyogQWpvdXQgZCd1bmUgbWFyZ2UgYXUtZGVzc3VzIGR1IGJvdXRvbiAqL1xyXG4gIHdpZHRoOiAxMDAlOyAvKiBMYXJnZXVyIG1heGltYWxlICovXHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["Validators","ModifierCandidatComponent","onAnnule","initForm","route","params","subscribe","candidatId","getCandidatById","constructor","formBuilder","candidatService","snackBar","router","ngOnInit","candidatForm","group","nom","required","prenom","adresseEmail","email","id","candidat","patchValue","onSubmit","invalid","getRawValue","modifierCandidat","open","duration","console","log","navigate","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["C:\\Users\\shehn\\Music\\Andex PFE\\FrontEnd\\src\\app\\Candidat\\modifier-candidat\\modifier-candidat.component.ts","C:\\Users\\shehn\\Music\\Andex PFE\\FrontEnd\\src\\app\\Candidat\\modifier-candidat\\modifier-candidat.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { CandidatService } from '../../Services/CandidatService'; \nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Candidat } from '../../models/Candidat';\n\n\n@Component({\n  selector: 'app-modifier-candidat',\n  templateUrl: './modifier-candidat.component.html',\n  styleUrls: ['./modifier-candidat.component.css']\n})\nexport class ModifierCandidatComponent implements OnInit {\nonAnnule() {\n  this.initForm();\n  this.route.params.subscribe(params => {\n    this.candidatId = +params['id'];\n    this.getCandidatById(this.candidatId);\n  });}\n\n  candidatForm!: FormGroup;\n  candidatId!: number;\n  constructor(\n    private formBuilder: FormBuilder,\n    private candidatService: CandidatService,\n    private snackBar: MatSnackBar,\n    private router: Router,\n    private route: ActivatedRoute\n  ) { }\n\n  ngOnInit(): void {\n    this.initForm();\n    this.route.params.subscribe(params => {\n      this.candidatId = +params['id'];\n      this.getCandidatById(this.candidatId);\n    });\n  }\n\n  initForm(): void {\n    this.candidatForm = this.formBuilder.group({\n      nom: ['', Validators.required],\n      prenom: ['', Validators.required],\n      adresseEmail: ['', [Validators.required, Validators.email]],\n\n    });\n  }\n\n  getCandidatById(id: number): void {\n    this.candidatService.getCandidatById(id)\n      .subscribe((candidat: any) => {\n        this.candidatForm.patchValue({\n          nom: candidat.nom,\n          prenom: candidat.prenom,\n          adresseEmail: candidat.adresseEmail\n        });\n      });\n  }\n\nonSubmit(): void {\n  if (this.candidatForm.invalid) {\n    return;\n  }\n  const candidat = this.candidatForm.getRawValue() as Candidat;\n  \n  this.candidatService.modifierCandidat(this.candidatId, candidat)\n    .subscribe(() => {\n      this.snackBar.open('Candidat modifié avec succès', 'Fermer', {\n        duration: 3000\n      });\n      console.log(candidat);\n      this.router.navigate(['/tableauBord/listeCandidat']);\n    });\n}\n\n}\n","<div class=\"container\">\n    \n    <h1>Modifier Candidat</h1>\n    <form [formGroup]=\"candidatForm\">\n        <div class=\"form-group\">\n            <label for=\"nom\">Nom :</label>\n            <input type=\"text\" id=\"nom\" class=\"form-control\" formControlName=\"nom\">\n        </div>\n        <div class=\"form-group\">\n            <label for=\"prenom\">Prénom :</label>\n            <input type=\"text\" id=\"prenom\" class=\"form-control\" formControlName=\"prenom\">\n        </div>\n        <div class=\"form-group\">\n            <label for=\"adresseEmail\">Adresse Email :</label>\n            <input type=\"email\" id=\"adresseEmail\" class=\"form-control\" formControlName=\"adresseEmail\">\n        </div>\n        <button  class=\"btnModif\" (click)=\"onSubmit()\" >Modifier</button>\n        <button  class=\"btnModif\" (click)=\"onAnnule()\" >Annuler</button>\n      \n    </form>\n   \n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}