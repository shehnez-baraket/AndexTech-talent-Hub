{"ast":null,"code":"import { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"src/app/Services/QuizService\";\nimport * as i4 from \"src/app/Services/CandidatService\";\nimport * as i5 from \"@angular/material/snack-bar\";\nimport * as i6 from \"@angular/common\";\nfunction CandidateSelectionDialogComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"input\", 6);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const candidate_r1 = ctx.$implicit;\n    const i_r2 = ctx.index;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formControlName\", i_r2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", candidate_r1.adresseEmail, \" \");\n  }\n}\nexport class CandidateSelectionDialogComponent {\n  constructor(dialogRef, data, formBuilder, quizService, candidatService, snackBar) {\n    this.dialogRef = dialogRef;\n    this.data = data;\n    this.formBuilder = formBuilder;\n    this.quizService = quizService;\n    this.candidatService = candidatService;\n    this.snackBar = snackBar;\n    this.candidates = [];\n    this.filteredCandidates = [];\n    this.candidateForm = this.formBuilder.group({\n      searchEmail: [''],\n      candidates: this.formBuilder.array([])\n    });\n  }\n  ngOnInit() {\n    this.candidatService.getCandidats().subscribe(candidates => {\n      this.candidates = candidates;\n      this.filteredCandidates = candidates;\n      this.candidates.forEach(() => {\n        this.candidatesArray.push(this.formBuilder.control(false));\n      });\n    }, error => {\n      console.error(error);\n      this.snackBar.open('Erreur lors du chargement des candidats', 'Fermer', {\n        duration: 3000\n      });\n    });\n    this.candidateForm.get('searchEmail')?.valueChanges.subscribe(searchTerm => {\n      this.filteredCandidates = this.filterCandidates(searchTerm);\n    });\n  }\n  get candidatesArray() {\n    return this.candidateForm.get('candidates');\n  }\n  filterCandidates(searchTerm) {\n    return this.candidates.filter(candidate => candidate.adresseEmail.toLowerCase().includes(searchTerm.toLowerCase()));\n  }\n  sendInvitations() {\n    const selectedCandidates = this.candidatesArray.controls.map((control, index) => control.value ? this.filteredCandidates[index] : null).filter(candidate => candidate !== null);\n    selectedCandidates.forEach(candidate => {\n      if (candidate) {\n        const candidatId = candidate.id;\n        const candidateEmail = candidate.adresseEmail;\n        this.quizService.generateQuizLink(candidatId, this.data.quizId).subscribe(linkResponse => {\n          const quizLink = linkResponse.link;\n          this.sendInvitationByEmail(candidateEmail).subscribe(() => {\n            this.snackBar.open('Invitation envoyée avec succès', 'Fermer', {\n              duration: 3000\n            });\n            console.log(`Invitation envoyée avec succès à ${candidateEmail}`);\n          }, error => {\n            this.snackBar.open('Erreur lors de l\\'envoi de l\\'invitation par email', 'Fermer', {\n              duration: 3000\n            });\n            console.error(`Erreur lors de l'envoi de l'invitation par email à ${candidateEmail} :`, error);\n          });\n        }, error => {\n          console.error('Erreur lors de la génération du lien du quiz :', error);\n        });\n      }\n    });\n  }\n  sendInvitationByEmail(email) {\n    return this.quizService.sendInvitation(email);\n  }\n  onCancel() {\n    this.dialogRef.close();\n  }\n  static #_ = this.ɵfac = function CandidateSelectionDialogComponent_Factory(t) {\n    return new (t || CandidateSelectionDialogComponent)(i0.ɵɵdirectiveInject(i1.MatDialogRef), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.QuizService), i0.ɵɵdirectiveInject(i4.CandidatService), i0.ɵɵdirectiveInject(i5.MatSnackBar));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CandidateSelectionDialogComponent,\n    selectors: [[\"app-candidate-selection-dialog\"]],\n    decls: 9,\n    vars: 2,\n    consts: [[1, \"container\"], [3, \"formGroup\"], [\"type\", \"text\", \"placeholder\", \"Rechercher par adresse e-mail...\", \"formControlName\", \"searchEmail\", 1, \"email-search\"], [\"formArrayName\", \"candidates\", 1, \"candidates-list\"], [4, \"ngFor\", \"ngForOf\"], [\"type\", \"button\", 1, \"send-button\", 3, \"click\"], [\"type\", \"checkbox\", 1, \"candidate-checkbox\", 3, \"formControlName\"]],\n    template: function CandidateSelectionDialogComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h1\");\n        i0.ɵɵtext(2, \"S\\u00E9lectionner un/des candidat(s)\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"form\", 1);\n        i0.ɵɵelement(4, \"input\", 2);\n        i0.ɵɵelementStart(5, \"div\", 3);\n        i0.ɵɵtemplate(6, CandidateSelectionDialogComponent_div_6_Template, 3, 2, \"div\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"button\", 5);\n        i0.ɵɵlistener(\"click\", function CandidateSelectionDialogComponent_Template_button_click_7_listener() {\n          return ctx.sendInvitations();\n        });\n        i0.ɵɵtext(8, \"Envoyer une invitation\");\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formGroup\", ctx.candidateForm);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.filteredCandidates);\n      }\n    },\n    dependencies: [i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.CheckboxControlValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i6.NgForOf, i2.FormGroupDirective, i2.FormControlName, i2.FormArrayName],\n    styles: [\".container[_ngcontent-%COMP%] {\\r\\n    width: 400px; \\r\\n    margin: 50px auto;\\r\\n    padding: 20px;\\r\\n    background-color: #fff;\\r\\n    border-radius: 10px;\\r\\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\\r\\n    text-align: center;\\r\\n  }\\r\\n  \\r\\n  h1[_ngcontent-%COMP%] {\\r\\n    color: #132579;\\r\\n    font-size: 20px; \\r\\n  }\\r\\n  \\r\\n  form[_ngcontent-%COMP%] {\\r\\n    margin-top: 20px;\\r\\n  }\\r\\n  \\r\\n  input[type=\\\"text\\\"][_ngcontent-%COMP%] {\\r\\n    width: 70%; \\r\\n    padding: 8px; \\r\\n    border: 1px solid #ccc;\\r\\n    border-radius: 5px;\\r\\n    margin-bottom: 10px;\\r\\n  }\\r\\n  \\r\\n  button[_ngcontent-%COMP%] {\\r\\n    background-color: #132579;\\r\\n    color: #fff;\\r\\n    border: none;\\r\\n    border-radius: 5px;\\r\\n    padding: 10px 20px;\\r\\n    cursor: pointer;\\r\\n    display: block; \\r\\n    margin: 0 auto; \\r\\n  }\\r\\n  \\r\\n  button[_ngcontent-%COMP%]:hover {\\r\\n    background-color: #0c1445;\\r\\n  }\\r\\n  \\r\\n  button[_ngcontent-%COMP%]:focus {\\r\\n    outline: none;\\r\\n  }\\r\\n  .candidates-list[_ngcontent-%COMP%] {\\r\\n    text-align: left; \\r\\n  }\\r\\n  \\r\\n  .candidate-checkbox[_ngcontent-%COMP%] {\\r\\n    vertical-align: middle; \\r\\n    margin-right: 10px; \\r\\n  }\\r\\n  \\r\\n  .send-button[_ngcontent-%COMP%] {\\r\\n    display: block; \\r\\n    margin: 20px auto; \\r\\n  }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvUXVpei9jYW5kaWRhdGUtc2VsZWN0aW9uLWRpYWxvZy9jYW5kaWRhdGUtc2VsZWN0aW9uLWRpYWxvZy5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksWUFBWSxFQUFFLDBDQUEwQztJQUN4RCxpQkFBaUI7SUFDakIsYUFBYTtJQUNiLHNCQUFzQjtJQUN0QixtQkFBbUI7SUFDbkIsdUNBQXVDO0lBQ3ZDLGtCQUFrQjtFQUNwQjs7RUFFQTtJQUNFLGNBQWM7SUFDZCxlQUFlLEVBQUUsb0NBQW9DO0VBQ3ZEOztFQUVBO0lBQ0UsZ0JBQWdCO0VBQ2xCOztFQUVBO0lBQ0UsVUFBVSxFQUFFLGtEQUFrRDtJQUM5RCxZQUFZLEVBQUUsd0NBQXdDO0lBQ3RELHNCQUFzQjtJQUN0QixrQkFBa0I7SUFDbEIsbUJBQW1CO0VBQ3JCOztFQUVBO0lBQ0UseUJBQXlCO0lBQ3pCLFdBQVc7SUFDWCxZQUFZO0lBQ1osa0JBQWtCO0lBQ2xCLGtCQUFrQjtJQUNsQixlQUFlO0lBQ2YsY0FBYyxFQUFFLHFCQUFxQjtJQUNyQyxjQUFjLEVBQUUscUJBQXFCO0VBQ3ZDOztFQUVBO0lBQ0UseUJBQXlCO0VBQzNCOztFQUVBO0lBQ0UsYUFBYTtFQUNmO0VBQ0E7SUFDRSxnQkFBZ0IsRUFBRSw4QkFBOEI7RUFDbEQ7O0VBRUE7SUFDRSxzQkFBc0IsRUFBRSx1REFBdUQ7SUFDL0Usa0JBQWtCLEVBQUUsc0RBQXNEO0VBQzVFOztFQUVBO0lBQ0UsY0FBYyxFQUFFLHdDQUF3QztJQUN4RCxpQkFBaUIsRUFBRSwrRUFBK0U7RUFDcEciLCJzb3VyY2VzQ29udGVudCI6WyIuY29udGFpbmVyIHtcclxuICAgIHdpZHRoOiA0MDBweDsgLyogVGFpbGxlIGZpeGUgcG91ciBsYSBmZW7Dg8KqdHJlIGRlIHBvcC11cCAqL1xyXG4gICAgbWFyZ2luOiA1MHB4IGF1dG87XHJcbiAgICBwYWRkaW5nOiAyMHB4O1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcclxuICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XHJcbiAgICBib3gtc2hhZG93OiAwIDAgMTBweCByZ2JhKDAsIDAsIDAsIDAuMSk7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgfVxyXG4gIFxyXG4gIGgxIHtcclxuICAgIGNvbG9yOiAjMTMyNTc5O1xyXG4gICAgZm9udC1zaXplOiAyMHB4OyAvKiBSw4PCqWR1Y3Rpb24gZGUgbGEgdGFpbGxlIGR1IHRpdHJlICovXHJcbiAgfVxyXG4gIFxyXG4gIGZvcm0ge1xyXG4gICAgbWFyZ2luLXRvcDogMjBweDtcclxuICB9XHJcbiAgXHJcbiAgaW5wdXRbdHlwZT1cInRleHRcIl0ge1xyXG4gICAgd2lkdGg6IDcwJTsgLyogUsODwqlkdWN0aW9uIGRlIGxhIGxhcmdldXIgZHUgY2hhbXAgZGUgcmVjaGVyY2hlICovXHJcbiAgICBwYWRkaW5nOiA4cHg7IC8qIFLDg8KpZHVjdGlvbiBkZSBsYSB0YWlsbGUgZGUgbGEgcG9saWNlICovXHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjY2NjO1xyXG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMTBweDtcclxuICB9XHJcbiAgXHJcbiAgYnV0dG9uIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICMxMzI1Nzk7XHJcbiAgICBjb2xvcjogI2ZmZjtcclxuICAgIGJvcmRlcjogbm9uZTtcclxuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcclxuICAgIHBhZGRpbmc6IDEwcHggMjBweDtcclxuICAgIGN1cnNvcjogcG9pbnRlcjtcclxuICAgIGRpc3BsYXk6IGJsb2NrOyAvKiBDZW50cmUgbGUgYm91dG9uICovXHJcbiAgICBtYXJnaW46IDAgYXV0bzsgLyogQ2VudHJlIGxlIGJvdXRvbiAqL1xyXG4gIH1cclxuICBcclxuICBidXR0b246aG92ZXIge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzBjMTQ0NTtcclxuICB9XHJcbiAgXHJcbiAgYnV0dG9uOmZvY3VzIHtcclxuICAgIG91dGxpbmU6IG5vbmU7XHJcbiAgfVxyXG4gIC5jYW5kaWRhdGVzLWxpc3Qge1xyXG4gICAgdGV4dC1hbGlnbjogbGVmdDsgLyogQWxpZ25lciBsZSB0ZXh0ZSDDg8KgIGdhdWNoZSAqL1xyXG4gIH1cclxuICBcclxuICAuY2FuZGlkYXRlLWNoZWNrYm94IHtcclxuICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7IC8qIEFsaWduZXIgbGVzIGNhc2VzIMODwqAgY29jaGVyIHZlcnRpY2FsZW1lbnQgYXUgY2VudHJlICovXHJcbiAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7IC8qIEFqb3V0ZXIgdW4gZXNwYWNlbWVudCDDg8KgIGRyb2l0ZSBkZXMgY2FzZXMgw4PCoCBjb2NoZXIgKi9cclxuICB9XHJcbiAgXHJcbiAgLnNlbmQtYnV0dG9uIHtcclxuICAgIGRpc3BsYXk6IGJsb2NrOyAvKiBBZmZpY2hlciBsZSBib3V0b24gZW4gdGFudCBxdWUgYmxvYyAqL1xyXG4gICAgbWFyZ2luOiAyMHB4IGF1dG87IC8qIENlbnRyZXIgbGUgYm91dG9uIGhvcml6b250YWxlbWVudCBhdmVjIHVuZSBtYXJnZSBkZSAyMHB4IGVuIGhhdXQgZXQgZW4gYmFzICovXHJcbiAgfVxyXG4gICJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["MAT_DIALOG_DATA","i0","CandidateSelectionDialogComponent","constructor","dialogRef","data","formBuilder","quizService","candidatService","snackBar","candidateForm","group","searchEmail","candidates","array","ngOnInit","getCandidats","subscribe","filteredCandidates","forEach","candidatesArray","push","control","error","console","open","duration","get","valueChanges","searchTerm","filterCandidates","filter","candidate","adresseEmail","toLowerCase","includes","sendInvitations","selectedCandidates","controls","map","index","value","candidatId","id","candidateEmail","generateQuizLink","quizId","linkResponse","quizLink","link","sendInvitationByEmail","log","email","sendInvitation","onCancel","close","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\shehn\\Music\\Andex PFE\\FrontEnd\\src\\app\\Quiz\\candidate-selection-dialog\\candidate-selection-dialog.component.ts","C:\\Users\\shehn\\Music\\Andex PFE\\FrontEnd\\src\\app\\Quiz\\candidate-selection-dialog\\candidate-selection-dialog.component.html"],"sourcesContent":["import { Component, Inject, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, FormArray } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { QuizService } from 'src/app/Services/QuizService';\nimport { CandidatService } from 'src/app/Services/CandidatService';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Candidat } from 'src/app/models/Candidat';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-candidate-selection-dialog',\n  templateUrl: './candidate-selection-dialog.component.html',\n  styleUrls: ['./candidate-selection-dialog.component.css']\n})\nexport class CandidateSelectionDialogComponent implements OnInit {\n  candidates: Candidat[] = [];\n  filteredCandidates: Candidat[] = [];\n  candidateForm: FormGroup;\n\n  constructor(\n    private dialogRef: MatDialogRef<CandidateSelectionDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: { quizId: number },\n    private formBuilder: FormBuilder,\n    private quizService: QuizService,\n    private candidatService: CandidatService,\n    private snackBar: MatSnackBar,\n  ) {\n    this.candidateForm = this.formBuilder.group({\n      searchEmail: [''],\n      candidates: this.formBuilder.array([])\n    });\n  }\n\n  ngOnInit(): void {\n    this.candidatService.getCandidats().subscribe(\n      (candidates) => {\n        this.candidates = candidates;\n        this.filteredCandidates = candidates;\n        this.candidates.forEach(() => {\n          this.candidatesArray.push(this.formBuilder.control(false));\n        });\n      },\n      (error) => {\n        console.error(error);\n        this.snackBar.open('Erreur lors du chargement des candidats', 'Fermer', { duration: 3000 });\n      }\n    );\n\n    this.candidateForm.get('searchEmail')?.valueChanges.subscribe(searchTerm => {\n      this.filteredCandidates = this.filterCandidates(searchTerm);\n    });\n  }\n\n  get candidatesArray(): FormArray {\n    return this.candidateForm.get('candidates') as FormArray;\n  }\n\n  filterCandidates(searchTerm: string): Candidat[] {\n    return this.candidates.filter(candidate => candidate.adresseEmail.toLowerCase().includes(searchTerm.toLowerCase()));\n  }\n\n  sendInvitations(): void {\n    const selectedCandidates = this.candidatesArray.controls\n      .map((control, index) => (control.value ? this.filteredCandidates[index] : null))\n      .filter(candidate => candidate !== null);\n\n    selectedCandidates.forEach((candidate: any) => {\n      if (candidate) {\n        const candidatId = candidate.id;\n        const candidateEmail = candidate.adresseEmail;\n\n        this.quizService.generateQuizLink(candidatId, this.data.quizId).subscribe(\n          (linkResponse: any) => {\n            const quizLink = linkResponse.link;\n            this.sendInvitationByEmail(candidateEmail).subscribe(\n              () => {\n                this.snackBar.open('Invitation envoyée avec succès', 'Fermer', { duration: 3000 });\n\n                console.log(`Invitation envoyée avec succès à ${candidateEmail}`);\n              },\n              (error: any) => {\n                this.snackBar.open('Erreur lors de l\\'envoi de l\\'invitation par email', 'Fermer', { duration: 3000 });\n\n                console.error(`Erreur lors de l'envoi de l'invitation par email à ${candidateEmail} :`, error);\n              }\n            );\n          },\n          (error: any) => {\n            console.error('Erreur lors de la génération du lien du quiz :', error);\n          }\n        );\n      }\n    });\n  }\n\n  sendInvitationByEmail(email: string): Observable<any> {\n    return this.quizService.sendInvitation(email);\n  }\n\n  onCancel(): void {\n    this.dialogRef.close();\n  }\n}\n","<div class=\"container\">\n  <h1>Sélectionner un/des candidat(s)</h1>\n\n  <form [formGroup]=\"candidateForm\">\n    <input type=\"text\" placeholder=\"Rechercher par adresse e-mail...\" formControlName=\"searchEmail\" class=\"email-search\">\n    <div formArrayName=\"candidates\" class=\"candidates-list\">\n      <div *ngFor=\"let candidate of filteredCandidates; let i = index\">\n        <input type=\"checkbox\" [formControlName]=\"i\" class=\"candidate-checkbox\">{{ candidate.adresseEmail }}\n      </div>\n    </div>\n    <button type=\"button\" (click)=\"sendInvitations()\" class=\"send-button\">Envoyer une invitation</button>\n  </form>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}